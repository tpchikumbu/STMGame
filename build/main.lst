ARM GAS  /tmp/cc1MGoPr.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.delay,"ax",%progbits
  19              		.align	1
  20              		.global	delay
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	delay:
  26              	.LVL0:
  27              	.LFB45:
  28              		.file 2 "Core/Inc/lcd_stm32f0.c"
   1:Core/Inc/lcd_stm32f0.c **** //********************************************************************
   2:Core/Inc/lcd_stm32f0.c **** //*                      EEE2046F STM32F0                            *
   3:Core/Inc/lcd_stm32f0.c **** //*                         LCD MODULE                               *
   4:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
   5:Core/Inc/lcd_stm32f0.c **** //* WRITTEN BY:    Copyright (C) Samuel Ginsberg 2004                *
   6:Core/Inc/lcd_stm32f0.c **** //* PORTED TO STM32F0 dev board by James Gowans, 2014                *
   7:Core/Inc/lcd_stm32f0.c **** //* MODIFIED BY:   Robyn Verrinder                                   *
   8:Core/Inc/lcd_stm32f0.c **** //* DATE CREATED:  2004                                              *
   9:Core/Inc/lcd_stm32f0.c **** //* PORTED:	   2014						     *
  10:Core/Inc/lcd_stm32f0.c **** //* MODIFIED:      03-08-2015                                        *
  11:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  12:Core/Inc/lcd_stm32f0.c **** //* PROGRAMMED IN: ECLIPSE IDE Luna Service Release 1 (4.4.1)        *
  13:Core/Inc/lcd_stm32f0.c **** //* DEV. BOARD:    UCT STM32 Development Board                       *
  14:Core/Inc/lcd_stm32f0.c **** //* TARGET:	   STMicroelectronics STM32F051C6                    *
  15:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  16:Core/Inc/lcd_stm32f0.c **** //* DESCRIPTION:   This code contains common functions to communicate*
  17:Core/Inc/lcd_stm32f0.c **** //*                with the LCD module connected to the STM32 uC.    *
  18:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  19:Core/Inc/lcd_stm32f0.c **** //* LCD SETUP:     - 4 bit mode      (Upper 4 data lines D4-D7 used) *
  20:Core/Inc/lcd_stm32f0.c **** //*                - Two lines used                                  *
  21:Core/Inc/lcd_stm32f0.c **** //*                - Flashing cursor                                 *
  22:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  23:Core/Inc/lcd_stm32f0.c **** //* CONNECTIONS:                                                     *
  24:Core/Inc/lcd_stm32f0.c **** //*------------------------------------------------------------------*
  25:Core/Inc/lcd_stm32f0.c **** //* LCD PINS   | NAME                    | CONNECTED TO              *
  26:Core/Inc/lcd_stm32f0.c **** //*------------------------------------------------------------------*
  27:Core/Inc/lcd_stm32f0.c **** //* 1............VSS.......................GND                       *
  28:Core/Inc/lcd_stm32f0.c **** //* 2............VDD.......................+5V                       *
  29:Core/Inc/lcd_stm32f0.c **** //* 3............CONTRAST..................POT 2                     *
  30:Core/Inc/lcd_stm32f0.c **** //* 4............RS  - Register Select.....PC14 (LCD_RS)             *
ARM GAS  /tmp/cc1MGoPr.s 			page 2


  31:Core/Inc/lcd_stm32f0.c **** //* 5............RW  - Read/Write..........GND                       *
  32:Core/Inc/lcd_stm32f0.c **** //* 6............E   - Enable..............PC15 (LCD_E)              *
  33:Core/Inc/lcd_stm32f0.c **** //* 7............D0  - Data line 0.........GND                       *
  34:Core/Inc/lcd_stm32f0.c **** //* 8............D1  - Data line 1.........GND                       *
  35:Core/Inc/lcd_stm32f0.c **** //* 9............D2  - Data line 2.........GND                       *
  36:Core/Inc/lcd_stm32f0.c **** //* 10...........D3  - Data line 3.........GND                       *
  37:Core/Inc/lcd_stm32f0.c **** //* 11...........D4  - Data line 4.........PB8  (LCD_D4)             *
  38:Core/Inc/lcd_stm32f0.c **** //* 12...........D5  - Data line 5.........PB9  (LCD_D5)             *
  39:Core/Inc/lcd_stm32f0.c **** //* 13...........D6  - Data line 6.........PA12 (LCD_D6)             *
  40:Core/Inc/lcd_stm32f0.c **** //* 14...........D7  - Data line 7.........PA15 (LCD_D7)             *
  41:Core/Inc/lcd_stm32f0.c **** //* 15...........CATHLED...................NC                        *
  42:Core/Inc/lcd_stm32f0.c **** //* 16...........ANODELED..................NC                        *
  43:Core/Inc/lcd_stm32f0.c **** //********************************************************************
  44:Core/Inc/lcd_stm32f0.c **** // INCLUDE FILES
  45:Core/Inc/lcd_stm32f0.c **** //====================================================================
  46:Core/Inc/lcd_stm32f0.c **** #include "lcd_stm32f0.h"
  47:Core/Inc/lcd_stm32f0.c **** #include "stm32f0xx.h"
  48:Core/Inc/lcd_stm32f0.c **** //====================================================================
  49:Core/Inc/lcd_stm32f0.c **** // SEND COMMAND CODE TO LCD - LCD_Command(command)
  50:Core/Inc/lcd_stm32f0.c **** //====================================================================
  51:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: This function sends a command to the LCD. Care is taken
  52:Core/Inc/lcd_stm32f0.c **** //              not to interfere with the other lines on the port.
  53:Core/Inc/lcd_stm32f0.c **** //
  54:Core/Inc/lcd_stm32f0.c **** //              As we are using a microcontroller to control the LCD
  55:Core/Inc/lcd_stm32f0.c **** //              we use 4-bit mode to save on number of lines used to
  56:Core/Inc/lcd_stm32f0.c **** //              connect to the LCD. This means that an 8-bit command
  57:Core/Inc/lcd_stm32f0.c **** //              must be split into two sets of 4-bits (upper and lower)
  58:Core/Inc/lcd_stm32f0.c **** //              These sets must be transmitted
  59:Core/Inc/lcd_stm32f0.c **** //====================================================================
  60:Core/Inc/lcd_stm32f0.c **** // USEFUL COMMANDS:
  61:Core/Inc/lcd_stm32f0.c **** //                  - POWER_UP:      Power up initialization for the lcd
  62:Core/Inc/lcd_stm32f0.c **** //                  - FOURBIT_MODE:  Sets LCD for 4-bit mode
  63:Core/Inc/lcd_stm32f0.c **** //                  - TWOLINE_MODE:  Sets up 2 lines and character size
  64:Core/Inc/lcd_stm32f0.c **** //                  - SETUP_CURSOR:  Turn display on and set up cursor
  65:Core/Inc/lcd_stm32f0.c **** //                  - CLEAR:         Clear screen
  66:Core/Inc/lcd_stm32f0.c **** //                  - CURSOR_HOME:   Cursor home
  67:Core/Inc/lcd_stm32f0.c **** //                  - LINE_TWO:      Line 2
  68:Core/Inc/lcd_stm32f0.c **** //
  69:Core/Inc/lcd_stm32f0.c **** //====================================================================
  70:Core/Inc/lcd_stm32f0.c **** 
  71:Core/Inc/lcd_stm32f0.c **** void lcd_command(unsigned char command)
  72:Core/Inc/lcd_stm32f0.c **** {
  73:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
  74:Core/Inc/lcd_stm32f0.c **** 
  75:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
  76:Core/Inc/lcd_stm32f0.c **** // DATALINE 7
  77:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
  78:Core/Inc/lcd_stm32f0.c ****     {
  79:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_SET;
  80:Core/Inc/lcd_stm32f0.c ****     }
  81:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D7
  82:Core/Inc/lcd_stm32f0.c ****     {
  83:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_RESET;
  84:Core/Inc/lcd_stm32f0.c ****     }
  85:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
  86:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
  87:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  /tmp/cc1MGoPr.s 			page 3


  88:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_SET;
  89:Core/Inc/lcd_stm32f0.c ****     }
  90:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D6
  91:Core/Inc/lcd_stm32f0.c ****     {
  92:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_RESET;
  93:Core/Inc/lcd_stm32f0.c ****     }
  94:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
  95:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
  96:Core/Inc/lcd_stm32f0.c ****     {
  97:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_SET;	
  98:Core/Inc/lcd_stm32f0.c ****     }
  99:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D5
 100:Core/Inc/lcd_stm32f0.c ****     {
 101:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_RESET;
 102:Core/Inc/lcd_stm32f0.c ****     }
 103:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 104:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 105:Core/Inc/lcd_stm32f0.c ****     {
 106:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_SET;
 107:Core/Inc/lcd_stm32f0.c ****     }
 108:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D4
 109:Core/Inc/lcd_stm32f0.c ****     {
 110:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_RESET;
 111:Core/Inc/lcd_stm32f0.c ****     }
 112:Core/Inc/lcd_stm32f0.c **** 
 113:Core/Inc/lcd_stm32f0.c ****     pulse_strobe ();			// Send data
 114:Core/Inc/lcd_stm32f0.c **** 
 115:Core/Inc/lcd_stm32f0.c **** // lower nibble to data lines
 116:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 117:Core/Inc/lcd_stm32f0.c ****     {
 118:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_SET;
 119:Core/Inc/lcd_stm32f0.c ****     }
 120:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D7
 121:Core/Inc/lcd_stm32f0.c ****     {
 122:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_RESET;
 123:Core/Inc/lcd_stm32f0.c ****     }
 124:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
 125:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 126:Core/Inc/lcd_stm32f0.c ****     {
 127:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_SET;
 128:Core/Inc/lcd_stm32f0.c ****     }
 129:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D6
 130:Core/Inc/lcd_stm32f0.c ****     {
 131:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_RESET;
 132:Core/Inc/lcd_stm32f0.c ****     }
 133:Core/Inc/lcd_stm32f0.c ****     // DATALINE 5
 134:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 135:Core/Inc/lcd_stm32f0.c ****     {
 136:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_SET;         
 137:Core/Inc/lcd_stm32f0.c ****     }
 138:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D5
 139:Core/Inc/lcd_stm32f0.c ****     {
 140:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_RESET;
 141:Core/Inc/lcd_stm32f0.c ****     }
 142:Core/Inc/lcd_stm32f0.c ****     // DATALINE 4
 143:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 144:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  /tmp/cc1MGoPr.s 			page 4


 145:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_SET;
 146:Core/Inc/lcd_stm32f0.c ****     }
 147:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D4
 148:Core/Inc/lcd_stm32f0.c ****     {
 149:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_RESET;
 150:Core/Inc/lcd_stm32f0.c ****     }
 151:Core/Inc/lcd_stm32f0.c **** 
 152:Core/Inc/lcd_stm32f0.c ****     pulse_strobe();			// Send data
 153:Core/Inc/lcd_stm32f0.c ****     delay(3000);
 154:Core/Inc/lcd_stm32f0.c **** }
 155:Core/Inc/lcd_stm32f0.c **** 
 156:Core/Inc/lcd_stm32f0.c **** //====================================================================
 157:Core/Inc/lcd_stm32f0.c **** // INITIALISE LCD - LCD_Init()
 158:Core/Inc/lcd_stm32f0.c **** //====================================================================
 159:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: This function sets up the port lines for the LCD and
 160:Core/Inc/lcd_stm32f0.c **** //              intialises the module for use.
 161:Core/Inc/lcd_stm32f0.c **** //====================================================================
 162:Core/Inc/lcd_stm32f0.c **** // LCD SETUP:     - 4 bit mode      (Upper 4 data lines D4-D7 used)
 163:Core/Inc/lcd_stm32f0.c **** //                - Two lines used
 164:Core/Inc/lcd_stm32f0.c **** //                - Flashing cursor
 165:Core/Inc/lcd_stm32f0.c **** //====================================================================
 166:Core/Inc/lcd_stm32f0.c **** 
 167:Core/Inc/lcd_stm32f0.c **** void init_LCD(void)
 168:Core/Inc/lcd_stm32f0.c **** {
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 171:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 172:Core/Inc/lcd_stm32f0.c **** 
 173:Core/Inc/lcd_stm32f0.c ****     GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 174:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 175:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 176:Core/Inc/lcd_stm32f0.c **** 
 177:Core/Inc/lcd_stm32f0.c ****     delay(30000);			// Allow the LCD some power up time (~30ms)
 178:Core/Inc/lcd_stm32f0.c **** 
 179:Core/Inc/lcd_stm32f0.c ****     lcd_command(POWER_UP);		// Power up initialization for the lcd
 180:Core/Inc/lcd_stm32f0.c ****     lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 181:Core/Inc/lcd_stm32f0.c ****     lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 182:Core/Inc/lcd_stm32f0.c ****     lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 183:Core/Inc/lcd_stm32f0.c ****     lcd_command(CLEAR);			// Clear display
 184:Core/Inc/lcd_stm32f0.c **** }
 185:Core/Inc/lcd_stm32f0.c **** 
 186:Core/Inc/lcd_stm32f0.c **** //====================================================================
 187:Core/Inc/lcd_stm32f0.c **** // WRITE A SINGLE CHARACTER TO THE LCD - LCD_PutChar(character)
 188:Core/Inc/lcd_stm32f0.c **** //====================================================================
 189:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Puts a single character on the LCD at the next position
 190:Core/Inc/lcd_stm32f0.c **** //              on the screen. The character to be printed is in the input
 191:Core/Inc/lcd_stm32f0.c **** //              parameter. For numbers, letters and other common characters
 192:Core/Inc/lcd_stm32f0.c **** //              the ASCII code will produce correct display.
 193:Core/Inc/lcd_stm32f0.c **** //
 194:Core/Inc/lcd_stm32f0.c **** //              Refer to the Hitachi HD44780 datasheet for full character
 195:Core/Inc/lcd_stm32f0.c **** //              set information.
 196:Core/Inc/lcd_stm32f0.c **** //====================================================================
 197:Core/Inc/lcd_stm32f0.c **** 
 198:Core/Inc/lcd_stm32f0.c ****  void lcd_putchar(unsigned char character)
 199:Core/Inc/lcd_stm32f0.c **** {
 200:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 201:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
ARM GAS  /tmp/cc1MGoPr.s 			page 5


 202:Core/Inc/lcd_stm32f0.c **** // DATALINE 7
 203:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x80) != 0) 	// Select bit 7 of command, if HIGH set Data line 7 (D7)
 204:Core/Inc/lcd_stm32f0.c ****         {
 205:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_SET;
 206:Core/Inc/lcd_stm32f0.c ****         }
 207:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D7
 208:Core/Inc/lcd_stm32f0.c ****         {
 209:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_RESET;
 210:Core/Inc/lcd_stm32f0.c ****         }
 211:Core/Inc/lcd_stm32f0.c ****         // DATALINE 6
 212:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x40) != 0)	// Select bit 6 of command, if HIGH set Data line 6 (D6)      
 213:Core/Inc/lcd_stm32f0.c **** 	{
 214:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_SET;
 215:Core/Inc/lcd_stm32f0.c ****         }
 216:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D6
 217:Core/Inc/lcd_stm32f0.c **** 
 218:Core/Inc/lcd_stm32f0.c ****         {
 219:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_RESET;
 220:Core/Inc/lcd_stm32f0.c ****         }
 221:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
 222:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x20) != 0)	// Select bit 5 of command, if HIGH set Data line 5 (D5)
 223:Core/Inc/lcd_stm32f0.c **** 
 224:Core/Inc/lcd_stm32f0.c ****         {
 225:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_SET;                 
 226:Core/Inc/lcd_stm32f0.c **** 	}
 227:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D5
 228:Core/Inc/lcd_stm32f0.c ****         {
 229:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_RESET;
 230:Core/Inc/lcd_stm32f0.c ****         }
 231:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 232:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x10) != 0)	// Select bit 4 of command, if HIGH set Data line 4 (D4) 
 233:Core/Inc/lcd_stm32f0.c ****         {
 234:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_SET;
 235:Core/Inc/lcd_stm32f0.c ****         }
 236:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D4
 237:Core/Inc/lcd_stm32f0.c ****         {
 238:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_RESET;
 239:Core/Inc/lcd_stm32f0.c ****         }
 240:Core/Inc/lcd_stm32f0.c **** 
 241:Core/Inc/lcd_stm32f0.c ****         pulse_strobe ();		// Send data
 242:Core/Inc/lcd_stm32f0.c **** 
 243:Core/Inc/lcd_stm32f0.c **** // lower nibble to data lines
 244:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x08) != 0)	// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 245:Core/Inc/lcd_stm32f0.c ****         {
 246:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_SET;
 247:Core/Inc/lcd_stm32f0.c ****         }
 248:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D7
 249:Core/Inc/lcd_stm32f0.c ****         {
 250:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_RESET;
 251:Core/Inc/lcd_stm32f0.c ****         }
 252:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
 253:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x04) != 0)	// Select bit 2 of command, if HIGH set Data line 6 (D6)      
 254:Core/Inc/lcd_stm32f0.c **** 	{
 255:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_SET;
 256:Core/Inc/lcd_stm32f0.c ****         }
 257:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D6
 258:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /tmp/cc1MGoPr.s 			page 6


 259:Core/Inc/lcd_stm32f0.c ****         {
 260:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_RESET;
 261:Core/Inc/lcd_stm32f0.c ****         }
 262:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
 263:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x02) != 0)	// Select bit 1 of command, if HIGH set Data line 5 (D5)  
 264:Core/Inc/lcd_stm32f0.c ****         {
 265:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_SET;       
 266:Core/Inc/lcd_stm32f0.c **** 	}
 267:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D5
 268:Core/Inc/lcd_stm32f0.c ****         {
 269:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_RESET;
 270:Core/Inc/lcd_stm32f0.c ****         }
 271:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 272:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x01) != 0)	// Select bit 0 of command, if HIGH set Data line 4 (D4)
 273:Core/Inc/lcd_stm32f0.c ****         {
 274:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_SET;
 275:Core/Inc/lcd_stm32f0.c ****         }
 276:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D4
 277:Core/Inc/lcd_stm32f0.c ****         {
 278:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_RESET;
 279:Core/Inc/lcd_stm32f0.c ****         }
 280:Core/Inc/lcd_stm32f0.c **** 
 281:Core/Inc/lcd_stm32f0.c ****         pulse_strobe();			// Send data
 282:Core/Inc/lcd_stm32f0.c **** }
 283:Core/Inc/lcd_stm32f0.c **** 
 284:Core/Inc/lcd_stm32f0.c **** //====================================================================
 285:Core/Inc/lcd_stm32f0.c **** // WRITE A STRING TO THE LCD - LCD_PutString(ptr_String)
 286:Core/Inc/lcd_stm32f0.c **** //====================================================================
 287:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Writes a string to the LCD
 288:Core/Inc/lcd_stm32f0.c **** //====================================================================
 289:Core/Inc/lcd_stm32f0.c **** 
 290:Core/Inc/lcd_stm32f0.c **** void lcd_putstring(char *instring)
 291:Core/Inc/lcd_stm32f0.c **** {
 292:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 293:Core/Inc/lcd_stm32f0.c **** 
 294:Core/Inc/lcd_stm32f0.c ****     while (instring[count])		// Until the null terminator is reached
 295:Core/Inc/lcd_stm32f0.c ****     {
 296:Core/Inc/lcd_stm32f0.c ****     	lcd_putchar(instring[count]);	// Write each character to LCD
 297:Core/Inc/lcd_stm32f0.c **** 	    count++;
 298:Core/Inc/lcd_stm32f0.c **** 	 }
 299:Core/Inc/lcd_stm32f0.c **** }
 300:Core/Inc/lcd_stm32f0.c **** 
 301:Core/Inc/lcd_stm32f0.c **** 
 302:Core/Inc/lcd_stm32f0.c **** //====================================================================
 303:Core/Inc/lcd_stm32f0.c **** // PULSE STROBE - Pulse_Strobe()
 304:Core/Inc/lcd_stm32f0.c **** //====================================================================
 305:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Pulse the strobe line of the LCD to indicate that data is ready.
 306:Core/Inc/lcd_stm32f0.c **** //====================================================================
 307:Core/Inc/lcd_stm32f0.c **** 
 308:Core/Inc/lcd_stm32f0.c **** void pulse_strobe(void)
 309:Core/Inc/lcd_stm32f0.c **** {
 310:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 311:Core/Inc/lcd_stm32f0.c **** 
 312:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 313:Core/Inc/lcd_stm32f0.c **** 
 314:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 315:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /tmp/cc1MGoPr.s 			page 7


 316:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 317:Core/Inc/lcd_stm32f0.c **** 
 318:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 319:Core/Inc/lcd_stm32f0.c **** 
 320:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 321:Core/Inc/lcd_stm32f0.c **** }
 322:Core/Inc/lcd_stm32f0.c **** 
 323:Core/Inc/lcd_stm32f0.c **** 
 324:Core/Inc/lcd_stm32f0.c **** //====================================================================
 325:Core/Inc/lcd_stm32f0.c **** // LOOP DELAY - delay(microseconds)
 326:Core/Inc/lcd_stm32f0.c **** //====================================================================
 327:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: A delay used by the LCD functions.
 328:Core/Inc/lcd_stm32f0.c **** //====================================================================
 329:Core/Inc/lcd_stm32f0.c **** 
 330:Core/Inc/lcd_stm32f0.c **** void delay(unsigned int microseconds)
 331:Core/Inc/lcd_stm32f0.c **** {
  29              		.loc 2 331 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 2 331 1 is_stmt 0 view .LVU1
  35 0000 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 8
 332:Core/Inc/lcd_stm32f0.c **** 	  volatile unsigned int counter;
  37              		.loc 2 332 4 is_stmt 1 view .LVU2
 333:Core/Inc/lcd_stm32f0.c **** 	  microseconds *= 3;
  38              		.loc 2 333 4 view .LVU3
  39              		.loc 2 333 17 is_stmt 0 view .LVU4
  40 0002 4300     		lsls	r3, r0, #1
  41 0004 1818     		adds	r0, r3, r0
  42              	.LVL1:
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  43              		.loc 2 334 4 is_stmt 1 view .LVU5
  44              		.loc 2 334 16 is_stmt 0 view .LVU6
  45 0006 0023     		movs	r3, #0
  46 0008 0193     		str	r3, [sp, #4]
  47              		.loc 2 334 4 view .LVU7
  48 000a 04E0     		b	.L2
  49              	.L3:
 335:Core/Inc/lcd_stm32f0.c **** 	  {
 336:Core/Inc/lcd_stm32f0.c **** 	    __asm("nop");
  50              		.loc 2 336 6 is_stmt 1 discriminator 3 view .LVU8
  51              		.syntax divided
  52              	@ 336 "Core/Inc/lcd_stm32f0.c" 1
  53 000c C046     		nop
  54              	@ 0 "" 2
 337:Core/Inc/lcd_stm32f0.c **** 	    __asm("nop");
  55              		.loc 2 337 6 discriminator 3 view .LVU9
  56              	@ 337 "Core/Inc/lcd_stm32f0.c" 1
  57 000e C046     		nop
  58              	@ 0 "" 2
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  59              		.loc 2 334 50 discriminator 3 view .LVU10
  60              		.thumb
  61              		.syntax unified
  62 0010 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cc1MGoPr.s 			page 8


  63 0012 0133     		adds	r3, r3, #1
  64 0014 0193     		str	r3, [sp, #4]
  65              	.L2:
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  66              		.loc 2 334 28 discriminator 1 view .LVU11
  67 0016 019B     		ldr	r3, [sp, #4]
  68 0018 8342     		cmp	r3, r0
  69 001a F7D3     		bcc	.L3
 338:Core/Inc/lcd_stm32f0.c **** 	  }
 339:Core/Inc/lcd_stm32f0.c **** }
  70              		.loc 2 339 1 is_stmt 0 view .LVU12
  71 001c 02B0     		add	sp, sp, #8
  72              		@ sp needed
  73 001e 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE45:
  77              		.section	.text.pulse_strobe,"ax",%progbits
  78              		.align	1
  79              		.global	pulse_strobe
  80              		.syntax unified
  81              		.code	16
  82              		.thumb_func
  84              	pulse_strobe:
  85              	.LFB44:
 309:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
  86              		.loc 2 309 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 70B5     		push	{r4, r5, r6, lr}
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 4, -16
  93              		.cfi_offset 5, -12
  94              		.cfi_offset 6, -8
  95              		.cfi_offset 14, -4
 310:Core/Inc/lcd_stm32f0.c **** 
  96              		.loc 2 310 5 view .LVU14
  97 0002 1420     		movs	r0, #20
  98 0004 FFF7FEFF 		bl	delay
  99              	.LVL2:
 312:Core/Inc/lcd_stm32f0.c **** 
 100              		.loc 2 312 5 view .LVU15
 312:Core/Inc/lcd_stm32f0.c **** 
 101              		.loc 2 312 10 is_stmt 0 view .LVU16
 102 0008 0A4C     		ldr	r4, .L5
 103 000a A369     		ldr	r3, [r4, #24]
 312:Core/Inc/lcd_stm32f0.c **** 
 104              		.loc 2 312 17 view .LVU17
 105 000c 8025     		movs	r5, #128
 106 000e 2D02     		lsls	r5, r5, #8
 107 0010 2B43     		orrs	r3, r5
 108 0012 A361     		str	r3, [r4, #24]
 314:Core/Inc/lcd_stm32f0.c **** 
 109              		.loc 2 314 5 is_stmt 1 view .LVU18
 110 0014 1420     		movs	r0, #20
 111 0016 FFF7FEFF 		bl	delay
 112              	.LVL3:
ARM GAS  /tmp/cc1MGoPr.s 			page 9


 316:Core/Inc/lcd_stm32f0.c **** 
 113              		.loc 2 316 5 view .LVU19
 316:Core/Inc/lcd_stm32f0.c **** 
 114              		.loc 2 316 10 is_stmt 0 view .LVU20
 115 001a A269     		ldr	r2, [r4, #24]
 316:Core/Inc/lcd_stm32f0.c **** 
 116              		.loc 2 316 17 view .LVU21
 117 001c 8023     		movs	r3, #128
 118 001e 1B06     		lsls	r3, r3, #24
 119 0020 1343     		orrs	r3, r2
 120 0022 A361     		str	r3, [r4, #24]
 318:Core/Inc/lcd_stm32f0.c **** 
 121              		.loc 2 318 5 is_stmt 1 view .LVU22
 122 0024 1420     		movs	r0, #20
 123 0026 FFF7FEFF 		bl	delay
 124              	.LVL4:
 320:Core/Inc/lcd_stm32f0.c **** }
 125              		.loc 2 320 5 view .LVU23
 320:Core/Inc/lcd_stm32f0.c **** }
 126              		.loc 2 320 10 is_stmt 0 view .LVU24
 127 002a A369     		ldr	r3, [r4, #24]
 320:Core/Inc/lcd_stm32f0.c **** }
 128              		.loc 2 320 17 view .LVU25
 129 002c 1D43     		orrs	r5, r3
 130 002e A561     		str	r5, [r4, #24]
 321:Core/Inc/lcd_stm32f0.c **** 
 131              		.loc 2 321 1 view .LVU26
 132              		@ sp needed
 133 0030 70BD     		pop	{r4, r5, r6, pc}
 134              	.L6:
 135 0032 C046     		.align	2
 136              	.L5:
 137 0034 00080048 		.word	1207961600
 138              		.cfi_endproc
 139              	.LFE44:
 141              		.section	.text.lcd_putchar,"ax",%progbits
 142              		.align	1
 143              		.global	lcd_putchar
 144              		.syntax unified
 145              		.code	16
 146              		.thumb_func
 148              	lcd_putchar:
 149              	.LVL5:
 150              	.LFB42:
 199:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 151              		.loc 2 199 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 199:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 155              		.loc 2 199 1 is_stmt 0 view .LVU28
 156 0000 10B5     		push	{r4, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 14, -4
 160 0002 0400     		movs	r4, r0
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
ARM GAS  /tmp/cc1MGoPr.s 			page 10


 161              		.loc 2 200 2 is_stmt 1 view .LVU29
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
 162              		.loc 2 200 7 is_stmt 0 view .LVU30
 163 0004 454A     		ldr	r2, .L25
 164 0006 9169     		ldr	r1, [r2, #24]
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
 165              		.loc 2 200 14 view .LVU31
 166 0008 8023     		movs	r3, #128
 167 000a DB01     		lsls	r3, r3, #7
 168 000c 0B43     		orrs	r3, r1
 169 000e 9361     		str	r3, [r2, #24]
 203:Core/Inc/lcd_stm32f0.c ****         {
 170              		.loc 2 203 9 is_stmt 1 view .LVU32
 203:Core/Inc/lcd_stm32f0.c ****         {
 171              		.loc 2 203 32 is_stmt 0 view .LVU33
 172 0010 43B2     		sxtb	r3, r0
 203:Core/Inc/lcd_stm32f0.c ****         {
 173              		.loc 2 203 12 view .LVU34
 174 0012 002B     		cmp	r3, #0
 175 0014 46DB     		blt	.L24
 209:Core/Inc/lcd_stm32f0.c ****         }
 176              		.loc 2 209 10 is_stmt 1 view .LVU35
 209:Core/Inc/lcd_stm32f0.c ****         }
 177              		.loc 2 209 15 is_stmt 0 view .LVU36
 178 0016 9022     		movs	r2, #144
 179 0018 D205     		lsls	r2, r2, #23
 180 001a 9169     		ldr	r1, [r2, #24]
 209:Core/Inc/lcd_stm32f0.c ****         }
 181              		.loc 2 209 22 view .LVU37
 182 001c 8023     		movs	r3, #128
 183 001e 1B06     		lsls	r3, r3, #24
 184 0020 0B43     		orrs	r3, r1
 185 0022 9361     		str	r3, [r2, #24]
 186              	.L9:
 212:Core/Inc/lcd_stm32f0.c **** 	{
 187              		.loc 2 212 9 is_stmt 1 view .LVU38
 212:Core/Inc/lcd_stm32f0.c **** 	{
 188              		.loc 2 212 12 is_stmt 0 view .LVU39
 189 0024 6306     		lsls	r3, r4, #25
 190 0026 45D5     		bpl	.L10
 214:Core/Inc/lcd_stm32f0.c ****         }
 191              		.loc 2 214 13 is_stmt 1 view .LVU40
 214:Core/Inc/lcd_stm32f0.c ****         }
 192              		.loc 2 214 18 is_stmt 0 view .LVU41
 193 0028 9022     		movs	r2, #144
 194 002a D205     		lsls	r2, r2, #23
 195 002c 9169     		ldr	r1, [r2, #24]
 214:Core/Inc/lcd_stm32f0.c ****         }
 196              		.loc 2 214 25 view .LVU42
 197 002e 8023     		movs	r3, #128
 198 0030 5B01     		lsls	r3, r3, #5
 199 0032 0B43     		orrs	r3, r1
 200 0034 9361     		str	r3, [r2, #24]
 201              	.L11:
 222:Core/Inc/lcd_stm32f0.c **** 
 202              		.loc 2 222 9 is_stmt 1 view .LVU43
 222:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /tmp/cc1MGoPr.s 			page 11


 203              		.loc 2 222 12 is_stmt 0 view .LVU44
 204 0036 A306     		lsls	r3, r4, #26
 205 0038 44D5     		bpl	.L12
 225:Core/Inc/lcd_stm32f0.c **** 	}
 206              		.loc 2 225 10 is_stmt 1 view .LVU45
 225:Core/Inc/lcd_stm32f0.c **** 	}
 207              		.loc 2 225 15 is_stmt 0 view .LVU46
 208 003a 394A     		ldr	r2, .L25+4
 209 003c 9169     		ldr	r1, [r2, #24]
 225:Core/Inc/lcd_stm32f0.c **** 	}
 210              		.loc 2 225 22 view .LVU47
 211 003e 8023     		movs	r3, #128
 212 0040 9B00     		lsls	r3, r3, #2
 213 0042 0B43     		orrs	r3, r1
 214 0044 9361     		str	r3, [r2, #24]
 215              	.L13:
 232:Core/Inc/lcd_stm32f0.c ****         {
 216              		.loc 2 232 9 is_stmt 1 view .LVU48
 232:Core/Inc/lcd_stm32f0.c ****         {
 217              		.loc 2 232 12 is_stmt 0 view .LVU49
 218 0046 E306     		lsls	r3, r4, #27
 219 0048 43D5     		bpl	.L14
 234:Core/Inc/lcd_stm32f0.c ****         }
 220              		.loc 2 234 10 is_stmt 1 view .LVU50
 234:Core/Inc/lcd_stm32f0.c ****         }
 221              		.loc 2 234 15 is_stmt 0 view .LVU51
 222 004a 354A     		ldr	r2, .L25+4
 223 004c 9169     		ldr	r1, [r2, #24]
 234:Core/Inc/lcd_stm32f0.c ****         }
 224              		.loc 2 234 22 view .LVU52
 225 004e 8023     		movs	r3, #128
 226 0050 5B00     		lsls	r3, r3, #1
 227 0052 0B43     		orrs	r3, r1
 228 0054 9361     		str	r3, [r2, #24]
 229              	.L15:
 241:Core/Inc/lcd_stm32f0.c **** 
 230              		.loc 2 241 9 is_stmt 1 view .LVU53
 231 0056 FFF7FEFF 		bl	pulse_strobe
 232              	.LVL6:
 244:Core/Inc/lcd_stm32f0.c ****         {
 233              		.loc 2 244 9 view .LVU54
 244:Core/Inc/lcd_stm32f0.c ****         {
 234              		.loc 2 244 12 is_stmt 0 view .LVU55
 235 005a 2307     		lsls	r3, r4, #28
 236 005c 40D5     		bpl	.L16
 246:Core/Inc/lcd_stm32f0.c ****         }
 237              		.loc 2 246 10 is_stmt 1 view .LVU56
 246:Core/Inc/lcd_stm32f0.c ****         }
 238              		.loc 2 246 15 is_stmt 0 view .LVU57
 239 005e 9022     		movs	r2, #144
 240 0060 D205     		lsls	r2, r2, #23
 241 0062 9169     		ldr	r1, [r2, #24]
 246:Core/Inc/lcd_stm32f0.c ****         }
 242              		.loc 2 246 22 view .LVU58
 243 0064 8023     		movs	r3, #128
 244 0066 1B02     		lsls	r3, r3, #8
 245 0068 0B43     		orrs	r3, r1
ARM GAS  /tmp/cc1MGoPr.s 			page 12


 246 006a 9361     		str	r3, [r2, #24]
 247              	.L17:
 253:Core/Inc/lcd_stm32f0.c **** 	{
 248              		.loc 2 253 9 is_stmt 1 view .LVU59
 253:Core/Inc/lcd_stm32f0.c **** 	{
 249              		.loc 2 253 12 is_stmt 0 view .LVU60
 250 006c 6307     		lsls	r3, r4, #29
 251 006e 3FD5     		bpl	.L18
 255:Core/Inc/lcd_stm32f0.c ****         }
 252              		.loc 2 255 13 is_stmt 1 view .LVU61
 255:Core/Inc/lcd_stm32f0.c ****         }
 253              		.loc 2 255 18 is_stmt 0 view .LVU62
 254 0070 9022     		movs	r2, #144
 255 0072 D205     		lsls	r2, r2, #23
 256 0074 9169     		ldr	r1, [r2, #24]
 255:Core/Inc/lcd_stm32f0.c ****         }
 257              		.loc 2 255 25 view .LVU63
 258 0076 8023     		movs	r3, #128
 259 0078 5B01     		lsls	r3, r3, #5
 260 007a 0B43     		orrs	r3, r1
 261 007c 9361     		str	r3, [r2, #24]
 262              	.L19:
 263:Core/Inc/lcd_stm32f0.c ****         {
 263              		.loc 2 263 9 is_stmt 1 view .LVU64
 263:Core/Inc/lcd_stm32f0.c ****         {
 264              		.loc 2 263 12 is_stmt 0 view .LVU65
 265 007e A307     		lsls	r3, r4, #30
 266 0080 3ED5     		bpl	.L20
 265:Core/Inc/lcd_stm32f0.c **** 	}
 267              		.loc 2 265 10 is_stmt 1 view .LVU66
 265:Core/Inc/lcd_stm32f0.c **** 	}
 268              		.loc 2 265 15 is_stmt 0 view .LVU67
 269 0082 274A     		ldr	r2, .L25+4
 270 0084 9169     		ldr	r1, [r2, #24]
 265:Core/Inc/lcd_stm32f0.c **** 	}
 271              		.loc 2 265 22 view .LVU68
 272 0086 8023     		movs	r3, #128
 273 0088 9B00     		lsls	r3, r3, #2
 274 008a 0B43     		orrs	r3, r1
 275 008c 9361     		str	r3, [r2, #24]
 276              	.L21:
 272:Core/Inc/lcd_stm32f0.c ****         {
 277              		.loc 2 272 9 is_stmt 1 view .LVU69
 272:Core/Inc/lcd_stm32f0.c ****         {
 278              		.loc 2 272 12 is_stmt 0 view .LVU70
 279 008e E407     		lsls	r4, r4, #31
 280 0090 3DD5     		bpl	.L22
 274:Core/Inc/lcd_stm32f0.c ****         }
 281              		.loc 2 274 10 is_stmt 1 view .LVU71
 274:Core/Inc/lcd_stm32f0.c ****         }
 282              		.loc 2 274 15 is_stmt 0 view .LVU72
 283 0092 234A     		ldr	r2, .L25+4
 284 0094 9169     		ldr	r1, [r2, #24]
 274:Core/Inc/lcd_stm32f0.c ****         }
 285              		.loc 2 274 22 view .LVU73
 286 0096 8023     		movs	r3, #128
 287 0098 5B00     		lsls	r3, r3, #1
ARM GAS  /tmp/cc1MGoPr.s 			page 13


 288 009a 0B43     		orrs	r3, r1
 289 009c 9361     		str	r3, [r2, #24]
 290              	.L23:
 281:Core/Inc/lcd_stm32f0.c **** }
 291              		.loc 2 281 9 is_stmt 1 view .LVU74
 292 009e FFF7FEFF 		bl	pulse_strobe
 293              	.LVL7:
 282:Core/Inc/lcd_stm32f0.c **** 
 294              		.loc 2 282 1 is_stmt 0 view .LVU75
 295              		@ sp needed
 296 00a2 10BD     		pop	{r4, pc}
 297              	.LVL8:
 298              	.L24:
 205:Core/Inc/lcd_stm32f0.c ****         }
 299              		.loc 2 205 10 is_stmt 1 view .LVU76
 205:Core/Inc/lcd_stm32f0.c ****         }
 300              		.loc 2 205 15 is_stmt 0 view .LVU77
 301 00a4 9022     		movs	r2, #144
 302 00a6 D205     		lsls	r2, r2, #23
 303 00a8 9169     		ldr	r1, [r2, #24]
 205:Core/Inc/lcd_stm32f0.c ****         }
 304              		.loc 2 205 22 view .LVU78
 305 00aa 8023     		movs	r3, #128
 306 00ac 1B02     		lsls	r3, r3, #8
 307 00ae 0B43     		orrs	r3, r1
 308 00b0 9361     		str	r3, [r2, #24]
 309 00b2 B7E7     		b	.L9
 310              	.L10:
 219:Core/Inc/lcd_stm32f0.c ****         }
 311              		.loc 2 219 13 is_stmt 1 view .LVU79
 219:Core/Inc/lcd_stm32f0.c ****         }
 312              		.loc 2 219 18 is_stmt 0 view .LVU80
 313 00b4 9022     		movs	r2, #144
 314 00b6 D205     		lsls	r2, r2, #23
 315 00b8 9169     		ldr	r1, [r2, #24]
 219:Core/Inc/lcd_stm32f0.c ****         }
 316              		.loc 2 219 25 view .LVU81
 317 00ba 8023     		movs	r3, #128
 318 00bc 5B05     		lsls	r3, r3, #21
 319 00be 0B43     		orrs	r3, r1
 320 00c0 9361     		str	r3, [r2, #24]
 321 00c2 B8E7     		b	.L11
 322              	.L12:
 229:Core/Inc/lcd_stm32f0.c ****         }
 323              		.loc 2 229 10 is_stmt 1 view .LVU82
 229:Core/Inc/lcd_stm32f0.c ****         }
 324              		.loc 2 229 15 is_stmt 0 view .LVU83
 325 00c4 164A     		ldr	r2, .L25+4
 326 00c6 9169     		ldr	r1, [r2, #24]
 229:Core/Inc/lcd_stm32f0.c ****         }
 327              		.loc 2 229 22 view .LVU84
 328 00c8 8023     		movs	r3, #128
 329 00ca 9B04     		lsls	r3, r3, #18
 330 00cc 0B43     		orrs	r3, r1
 331 00ce 9361     		str	r3, [r2, #24]
 332 00d0 B9E7     		b	.L13
 333              	.L14:
ARM GAS  /tmp/cc1MGoPr.s 			page 14


 238:Core/Inc/lcd_stm32f0.c ****         }
 334              		.loc 2 238 10 is_stmt 1 view .LVU85
 238:Core/Inc/lcd_stm32f0.c ****         }
 335              		.loc 2 238 15 is_stmt 0 view .LVU86
 336 00d2 134A     		ldr	r2, .L25+4
 337 00d4 9169     		ldr	r1, [r2, #24]
 238:Core/Inc/lcd_stm32f0.c ****         }
 338              		.loc 2 238 22 view .LVU87
 339 00d6 8023     		movs	r3, #128
 340 00d8 5B04     		lsls	r3, r3, #17
 341 00da 0B43     		orrs	r3, r1
 342 00dc 9361     		str	r3, [r2, #24]
 343 00de BAE7     		b	.L15
 344              	.LVL9:
 345              	.L16:
 250:Core/Inc/lcd_stm32f0.c ****         }
 346              		.loc 2 250 10 is_stmt 1 view .LVU88
 250:Core/Inc/lcd_stm32f0.c ****         }
 347              		.loc 2 250 15 is_stmt 0 view .LVU89
 348 00e0 9022     		movs	r2, #144
 349 00e2 D205     		lsls	r2, r2, #23
 350 00e4 9169     		ldr	r1, [r2, #24]
 250:Core/Inc/lcd_stm32f0.c ****         }
 351              		.loc 2 250 22 view .LVU90
 352 00e6 8023     		movs	r3, #128
 353 00e8 1B06     		lsls	r3, r3, #24
 354 00ea 0B43     		orrs	r3, r1
 355 00ec 9361     		str	r3, [r2, #24]
 356 00ee BDE7     		b	.L17
 357              	.L18:
 260:Core/Inc/lcd_stm32f0.c ****         }
 358              		.loc 2 260 13 is_stmt 1 view .LVU91
 260:Core/Inc/lcd_stm32f0.c ****         }
 359              		.loc 2 260 18 is_stmt 0 view .LVU92
 360 00f0 9022     		movs	r2, #144
 361 00f2 D205     		lsls	r2, r2, #23
 362 00f4 9169     		ldr	r1, [r2, #24]
 260:Core/Inc/lcd_stm32f0.c ****         }
 363              		.loc 2 260 25 view .LVU93
 364 00f6 8023     		movs	r3, #128
 365 00f8 5B05     		lsls	r3, r3, #21
 366 00fa 0B43     		orrs	r3, r1
 367 00fc 9361     		str	r3, [r2, #24]
 368 00fe BEE7     		b	.L19
 369              	.L20:
 269:Core/Inc/lcd_stm32f0.c ****         }
 370              		.loc 2 269 10 is_stmt 1 view .LVU94
 269:Core/Inc/lcd_stm32f0.c ****         }
 371              		.loc 2 269 15 is_stmt 0 view .LVU95
 372 0100 074A     		ldr	r2, .L25+4
 373 0102 9169     		ldr	r1, [r2, #24]
 269:Core/Inc/lcd_stm32f0.c ****         }
 374              		.loc 2 269 22 view .LVU96
 375 0104 8023     		movs	r3, #128
 376 0106 9B04     		lsls	r3, r3, #18
 377 0108 0B43     		orrs	r3, r1
 378 010a 9361     		str	r3, [r2, #24]
ARM GAS  /tmp/cc1MGoPr.s 			page 15


 379 010c BFE7     		b	.L21
 380              	.L22:
 278:Core/Inc/lcd_stm32f0.c ****         }
 381              		.loc 2 278 10 is_stmt 1 view .LVU97
 278:Core/Inc/lcd_stm32f0.c ****         }
 382              		.loc 2 278 15 is_stmt 0 view .LVU98
 383 010e 044A     		ldr	r2, .L25+4
 384 0110 9169     		ldr	r1, [r2, #24]
 278:Core/Inc/lcd_stm32f0.c ****         }
 385              		.loc 2 278 22 view .LVU99
 386 0112 8023     		movs	r3, #128
 387 0114 5B04     		lsls	r3, r3, #17
 388 0116 0B43     		orrs	r3, r1
 389 0118 9361     		str	r3, [r2, #24]
 390 011a C0E7     		b	.L23
 391              	.L26:
 392              		.align	2
 393              	.L25:
 394 011c 00080048 		.word	1207961600
 395 0120 00040048 		.word	1207960576
 396              		.cfi_endproc
 397              	.LFE42:
 399              		.section	.text.lcd_putstring,"ax",%progbits
 400              		.align	1
 401              		.global	lcd_putstring
 402              		.syntax unified
 403              		.code	16
 404              		.thumb_func
 406              	lcd_putstring:
 407              	.LVL10:
 408              	.LFB43:
 291:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 409              		.loc 2 291 1 is_stmt 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 291:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 413              		.loc 2 291 1 is_stmt 0 view .LVU101
 414 0000 70B5     		push	{r4, r5, r6, lr}
 415              		.cfi_def_cfa_offset 16
 416              		.cfi_offset 4, -16
 417              		.cfi_offset 5, -12
 418              		.cfi_offset 6, -8
 419              		.cfi_offset 14, -4
 420 0002 0500     		movs	r5, r0
 292:Core/Inc/lcd_stm32f0.c **** 
 421              		.loc 2 292 5 is_stmt 1 view .LVU102
 422              	.LVL11:
 294:Core/Inc/lcd_stm32f0.c ****     {
 423              		.loc 2 294 5 view .LVU103
 292:Core/Inc/lcd_stm32f0.c **** 
 424              		.loc 2 292 19 is_stmt 0 view .LVU104
 425 0004 0024     		movs	r4, #0
 294:Core/Inc/lcd_stm32f0.c ****     {
 426              		.loc 2 294 11 view .LVU105
 427 0006 03E0     		b	.L28
 428              	.LVL12:
ARM GAS  /tmp/cc1MGoPr.s 			page 16


 429              	.L29:
 296:Core/Inc/lcd_stm32f0.c **** 	    count++;
 430              		.loc 2 296 6 is_stmt 1 view .LVU106
 431 0008 FFF7FEFF 		bl	lcd_putchar
 432              	.LVL13:
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 433              		.loc 2 297 6 view .LVU107
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 434              		.loc 2 297 11 is_stmt 0 view .LVU108
 435 000c 0134     		adds	r4, r4, #1
 436              	.LVL14:
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 437              		.loc 2 297 11 view .LVU109
 438 000e E4B2     		uxtb	r4, r4
 439              	.LVL15:
 440              	.L28:
 294:Core/Inc/lcd_stm32f0.c ****     {
 441              		.loc 2 294 12 is_stmt 1 view .LVU110
 294:Core/Inc/lcd_stm32f0.c ****     {
 442              		.loc 2 294 20 is_stmt 0 view .LVU111
 443 0010 285D     		ldrb	r0, [r5, r4]
 294:Core/Inc/lcd_stm32f0.c ****     {
 444              		.loc 2 294 12 view .LVU112
 445 0012 0028     		cmp	r0, #0
 446 0014 F8D1     		bne	.L29
 299:Core/Inc/lcd_stm32f0.c **** 
 447              		.loc 2 299 1 view .LVU113
 448              		@ sp needed
 449              	.LVL16:
 450              	.LVL17:
 299:Core/Inc/lcd_stm32f0.c **** 
 451              		.loc 2 299 1 view .LVU114
 452 0016 70BD     		pop	{r4, r5, r6, pc}
 453              		.cfi_endproc
 454              	.LFE43:
 456              		.section	.text.lcd_command,"ax",%progbits
 457              		.align	1
 458              		.global	lcd_command
 459              		.syntax unified
 460              		.code	16
 461              		.thumb_func
 463              	lcd_command:
 464              	.LVL18:
 465              	.LFB40:
  72:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
 466              		.loc 2 72 1 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
  72:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
 470              		.loc 2 72 1 is_stmt 0 view .LVU116
 471 0000 10B5     		push	{r4, lr}
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 475 0002 0400     		movs	r4, r0
  73:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /tmp/cc1MGoPr.s 			page 17


 476              		.loc 2 73 5 is_stmt 1 view .LVU117
  73:Core/Inc/lcd_stm32f0.c **** 
 477              		.loc 2 73 10 is_stmt 0 view .LVU118
 478 0004 474A     		ldr	r2, .L48
 479 0006 9169     		ldr	r1, [r2, #24]
  73:Core/Inc/lcd_stm32f0.c **** 
 480              		.loc 2 73 17 view .LVU119
 481 0008 8023     		movs	r3, #128
 482 000a DB05     		lsls	r3, r3, #23
 483 000c 0B43     		orrs	r3, r1
 484 000e 9361     		str	r3, [r2, #24]
  77:Core/Inc/lcd_stm32f0.c ****     {
 485              		.loc 2 77 5 is_stmt 1 view .LVU120
  77:Core/Inc/lcd_stm32f0.c ****     {
 486              		.loc 2 77 26 is_stmt 0 view .LVU121
 487 0010 43B2     		sxtb	r3, r0
  77:Core/Inc/lcd_stm32f0.c ****     {
 488              		.loc 2 77 8 view .LVU122
 489 0012 002B     		cmp	r3, #0
 490 0014 49DB     		blt	.L47
  83:Core/Inc/lcd_stm32f0.c ****     }
 491              		.loc 2 83 6 is_stmt 1 view .LVU123
  83:Core/Inc/lcd_stm32f0.c ****     }
 492              		.loc 2 83 11 is_stmt 0 view .LVU124
 493 0016 9022     		movs	r2, #144
 494 0018 D205     		lsls	r2, r2, #23
 495 001a 9169     		ldr	r1, [r2, #24]
  83:Core/Inc/lcd_stm32f0.c ****     }
 496              		.loc 2 83 18 view .LVU125
 497 001c 8023     		movs	r3, #128
 498 001e 1B06     		lsls	r3, r3, #24
 499 0020 0B43     		orrs	r3, r1
 500 0022 9361     		str	r3, [r2, #24]
 501              	.L32:
  86:Core/Inc/lcd_stm32f0.c ****     {
 502              		.loc 2 86 5 is_stmt 1 view .LVU126
  86:Core/Inc/lcd_stm32f0.c ****     {
 503              		.loc 2 86 8 is_stmt 0 view .LVU127
 504 0024 6306     		lsls	r3, r4, #25
 505 0026 48D5     		bpl	.L33
  88:Core/Inc/lcd_stm32f0.c ****     }
 506              		.loc 2 88 9 is_stmt 1 view .LVU128
  88:Core/Inc/lcd_stm32f0.c ****     }
 507              		.loc 2 88 14 is_stmt 0 view .LVU129
 508 0028 9022     		movs	r2, #144
 509 002a D205     		lsls	r2, r2, #23
 510 002c 9169     		ldr	r1, [r2, #24]
  88:Core/Inc/lcd_stm32f0.c ****     }
 511              		.loc 2 88 21 view .LVU130
 512 002e 8023     		movs	r3, #128
 513 0030 5B01     		lsls	r3, r3, #5
 514 0032 0B43     		orrs	r3, r1
 515 0034 9361     		str	r3, [r2, #24]
 516              	.L34:
  95:Core/Inc/lcd_stm32f0.c ****     {
 517              		.loc 2 95 5 is_stmt 1 view .LVU131
  95:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  /tmp/cc1MGoPr.s 			page 18


 518              		.loc 2 95 8 is_stmt 0 view .LVU132
 519 0036 A306     		lsls	r3, r4, #26
 520 0038 47D5     		bpl	.L35
  97:Core/Inc/lcd_stm32f0.c ****     }
 521              		.loc 2 97 6 is_stmt 1 view .LVU133
  97:Core/Inc/lcd_stm32f0.c ****     }
 522              		.loc 2 97 11 is_stmt 0 view .LVU134
 523 003a 3B4A     		ldr	r2, .L48+4
 524 003c 9169     		ldr	r1, [r2, #24]
  97:Core/Inc/lcd_stm32f0.c ****     }
 525              		.loc 2 97 18 view .LVU135
 526 003e 8023     		movs	r3, #128
 527 0040 9B00     		lsls	r3, r3, #2
 528 0042 0B43     		orrs	r3, r1
 529 0044 9361     		str	r3, [r2, #24]
 530              	.L36:
 104:Core/Inc/lcd_stm32f0.c ****     {
 531              		.loc 2 104 5 is_stmt 1 view .LVU136
 104:Core/Inc/lcd_stm32f0.c ****     {
 532              		.loc 2 104 8 is_stmt 0 view .LVU137
 533 0046 E306     		lsls	r3, r4, #27
 534 0048 46D5     		bpl	.L37
 106:Core/Inc/lcd_stm32f0.c ****     }
 535              		.loc 2 106 6 is_stmt 1 view .LVU138
 106:Core/Inc/lcd_stm32f0.c ****     }
 536              		.loc 2 106 11 is_stmt 0 view .LVU139
 537 004a 374A     		ldr	r2, .L48+4
 538 004c 9169     		ldr	r1, [r2, #24]
 106:Core/Inc/lcd_stm32f0.c ****     }
 539              		.loc 2 106 18 view .LVU140
 540 004e 8023     		movs	r3, #128
 541 0050 5B00     		lsls	r3, r3, #1
 542 0052 0B43     		orrs	r3, r1
 543 0054 9361     		str	r3, [r2, #24]
 544              	.L38:
 113:Core/Inc/lcd_stm32f0.c **** 
 545              		.loc 2 113 5 is_stmt 1 view .LVU141
 546 0056 FFF7FEFF 		bl	pulse_strobe
 547              	.LVL19:
 116:Core/Inc/lcd_stm32f0.c ****     {
 548              		.loc 2 116 5 view .LVU142
 116:Core/Inc/lcd_stm32f0.c ****     {
 549              		.loc 2 116 8 is_stmt 0 view .LVU143
 550 005a 2307     		lsls	r3, r4, #28
 551 005c 43D5     		bpl	.L39
 118:Core/Inc/lcd_stm32f0.c ****     }
 552              		.loc 2 118 6 is_stmt 1 view .LVU144
 118:Core/Inc/lcd_stm32f0.c ****     }
 553              		.loc 2 118 11 is_stmt 0 view .LVU145
 554 005e 9022     		movs	r2, #144
 555 0060 D205     		lsls	r2, r2, #23
 556 0062 9169     		ldr	r1, [r2, #24]
 118:Core/Inc/lcd_stm32f0.c ****     }
 557              		.loc 2 118 18 view .LVU146
 558 0064 8023     		movs	r3, #128
 559 0066 1B02     		lsls	r3, r3, #8
 560 0068 0B43     		orrs	r3, r1
ARM GAS  /tmp/cc1MGoPr.s 			page 19


 561 006a 9361     		str	r3, [r2, #24]
 562              	.L40:
 125:Core/Inc/lcd_stm32f0.c ****     {
 563              		.loc 2 125 5 is_stmt 1 view .LVU147
 125:Core/Inc/lcd_stm32f0.c ****     {
 564              		.loc 2 125 8 is_stmt 0 view .LVU148
 565 006c 6307     		lsls	r3, r4, #29
 566 006e 42D5     		bpl	.L41
 127:Core/Inc/lcd_stm32f0.c ****     }
 567              		.loc 2 127 9 is_stmt 1 view .LVU149
 127:Core/Inc/lcd_stm32f0.c ****     }
 568              		.loc 2 127 14 is_stmt 0 view .LVU150
 569 0070 9022     		movs	r2, #144
 570 0072 D205     		lsls	r2, r2, #23
 571 0074 9169     		ldr	r1, [r2, #24]
 127:Core/Inc/lcd_stm32f0.c ****     }
 572              		.loc 2 127 21 view .LVU151
 573 0076 8023     		movs	r3, #128
 574 0078 5B01     		lsls	r3, r3, #5
 575 007a 0B43     		orrs	r3, r1
 576 007c 9361     		str	r3, [r2, #24]
 577              	.L42:
 134:Core/Inc/lcd_stm32f0.c ****     {
 578              		.loc 2 134 5 is_stmt 1 view .LVU152
 134:Core/Inc/lcd_stm32f0.c ****     {
 579              		.loc 2 134 8 is_stmt 0 view .LVU153
 580 007e A307     		lsls	r3, r4, #30
 581 0080 41D5     		bpl	.L43
 136:Core/Inc/lcd_stm32f0.c ****     }
 582              		.loc 2 136 6 is_stmt 1 view .LVU154
 136:Core/Inc/lcd_stm32f0.c ****     }
 583              		.loc 2 136 11 is_stmt 0 view .LVU155
 584 0082 294A     		ldr	r2, .L48+4
 585 0084 9169     		ldr	r1, [r2, #24]
 136:Core/Inc/lcd_stm32f0.c ****     }
 586              		.loc 2 136 18 view .LVU156
 587 0086 8023     		movs	r3, #128
 588 0088 9B00     		lsls	r3, r3, #2
 589 008a 0B43     		orrs	r3, r1
 590 008c 9361     		str	r3, [r2, #24]
 591              	.L44:
 143:Core/Inc/lcd_stm32f0.c ****     {
 592              		.loc 2 143 5 is_stmt 1 view .LVU157
 143:Core/Inc/lcd_stm32f0.c ****     {
 593              		.loc 2 143 8 is_stmt 0 view .LVU158
 594 008e E407     		lsls	r4, r4, #31
 595 0090 40D5     		bpl	.L45
 145:Core/Inc/lcd_stm32f0.c ****     }
 596              		.loc 2 145 6 is_stmt 1 view .LVU159
 145:Core/Inc/lcd_stm32f0.c ****     }
 597              		.loc 2 145 11 is_stmt 0 view .LVU160
 598 0092 254A     		ldr	r2, .L48+4
 599 0094 9169     		ldr	r1, [r2, #24]
 145:Core/Inc/lcd_stm32f0.c ****     }
 600              		.loc 2 145 18 view .LVU161
 601 0096 8023     		movs	r3, #128
 602 0098 5B00     		lsls	r3, r3, #1
ARM GAS  /tmp/cc1MGoPr.s 			page 20


 603 009a 0B43     		orrs	r3, r1
 604 009c 9361     		str	r3, [r2, #24]
 605              	.L46:
 152:Core/Inc/lcd_stm32f0.c ****     delay(3000);
 606              		.loc 2 152 5 is_stmt 1 view .LVU162
 607 009e FFF7FEFF 		bl	pulse_strobe
 608              	.LVL20:
 153:Core/Inc/lcd_stm32f0.c **** }
 609              		.loc 2 153 5 view .LVU163
 610 00a2 2248     		ldr	r0, .L48+8
 611 00a4 FFF7FEFF 		bl	delay
 612              	.LVL21:
 154:Core/Inc/lcd_stm32f0.c **** 
 613              		.loc 2 154 1 is_stmt 0 view .LVU164
 614              		@ sp needed
 615 00a8 10BD     		pop	{r4, pc}
 616              	.LVL22:
 617              	.L47:
  79:Core/Inc/lcd_stm32f0.c ****     }
 618              		.loc 2 79 6 is_stmt 1 view .LVU165
  79:Core/Inc/lcd_stm32f0.c ****     }
 619              		.loc 2 79 11 is_stmt 0 view .LVU166
 620 00aa 9022     		movs	r2, #144
 621 00ac D205     		lsls	r2, r2, #23
 622 00ae 9169     		ldr	r1, [r2, #24]
  79:Core/Inc/lcd_stm32f0.c ****     }
 623              		.loc 2 79 18 view .LVU167
 624 00b0 8023     		movs	r3, #128
 625 00b2 1B02     		lsls	r3, r3, #8
 626 00b4 0B43     		orrs	r3, r1
 627 00b6 9361     		str	r3, [r2, #24]
 628 00b8 B4E7     		b	.L32
 629              	.L33:
  92:Core/Inc/lcd_stm32f0.c ****     }
 630              		.loc 2 92 9 is_stmt 1 view .LVU168
  92:Core/Inc/lcd_stm32f0.c ****     }
 631              		.loc 2 92 14 is_stmt 0 view .LVU169
 632 00ba 9022     		movs	r2, #144
 633 00bc D205     		lsls	r2, r2, #23
 634 00be 9169     		ldr	r1, [r2, #24]
  92:Core/Inc/lcd_stm32f0.c ****     }
 635              		.loc 2 92 21 view .LVU170
 636 00c0 8023     		movs	r3, #128
 637 00c2 5B05     		lsls	r3, r3, #21
 638 00c4 0B43     		orrs	r3, r1
 639 00c6 9361     		str	r3, [r2, #24]
 640 00c8 B5E7     		b	.L34
 641              	.L35:
 101:Core/Inc/lcd_stm32f0.c ****     }
 642              		.loc 2 101 6 is_stmt 1 view .LVU171
 101:Core/Inc/lcd_stm32f0.c ****     }
 643              		.loc 2 101 11 is_stmt 0 view .LVU172
 644 00ca 174A     		ldr	r2, .L48+4
 645 00cc 9169     		ldr	r1, [r2, #24]
 101:Core/Inc/lcd_stm32f0.c ****     }
 646              		.loc 2 101 18 view .LVU173
 647 00ce 8023     		movs	r3, #128
ARM GAS  /tmp/cc1MGoPr.s 			page 21


 648 00d0 9B04     		lsls	r3, r3, #18
 649 00d2 0B43     		orrs	r3, r1
 650 00d4 9361     		str	r3, [r2, #24]
 651 00d6 B6E7     		b	.L36
 652              	.L37:
 110:Core/Inc/lcd_stm32f0.c ****     }
 653              		.loc 2 110 6 is_stmt 1 view .LVU174
 110:Core/Inc/lcd_stm32f0.c ****     }
 654              		.loc 2 110 11 is_stmt 0 view .LVU175
 655 00d8 134A     		ldr	r2, .L48+4
 656 00da 9169     		ldr	r1, [r2, #24]
 110:Core/Inc/lcd_stm32f0.c ****     }
 657              		.loc 2 110 18 view .LVU176
 658 00dc 8023     		movs	r3, #128
 659 00de 5B04     		lsls	r3, r3, #17
 660 00e0 0B43     		orrs	r3, r1
 661 00e2 9361     		str	r3, [r2, #24]
 662 00e4 B7E7     		b	.L38
 663              	.LVL23:
 664              	.L39:
 122:Core/Inc/lcd_stm32f0.c ****     }
 665              		.loc 2 122 6 is_stmt 1 view .LVU177
 122:Core/Inc/lcd_stm32f0.c ****     }
 666              		.loc 2 122 11 is_stmt 0 view .LVU178
 667 00e6 9022     		movs	r2, #144
 668 00e8 D205     		lsls	r2, r2, #23
 669 00ea 9169     		ldr	r1, [r2, #24]
 122:Core/Inc/lcd_stm32f0.c ****     }
 670              		.loc 2 122 18 view .LVU179
 671 00ec 8023     		movs	r3, #128
 672 00ee 1B06     		lsls	r3, r3, #24
 673 00f0 0B43     		orrs	r3, r1
 674 00f2 9361     		str	r3, [r2, #24]
 675 00f4 BAE7     		b	.L40
 676              	.L41:
 131:Core/Inc/lcd_stm32f0.c ****     }
 677              		.loc 2 131 9 is_stmt 1 view .LVU180
 131:Core/Inc/lcd_stm32f0.c ****     }
 678              		.loc 2 131 14 is_stmt 0 view .LVU181
 679 00f6 9022     		movs	r2, #144
 680 00f8 D205     		lsls	r2, r2, #23
 681 00fa 9169     		ldr	r1, [r2, #24]
 131:Core/Inc/lcd_stm32f0.c ****     }
 682              		.loc 2 131 21 view .LVU182
 683 00fc 8023     		movs	r3, #128
 684 00fe 5B05     		lsls	r3, r3, #21
 685 0100 0B43     		orrs	r3, r1
 686 0102 9361     		str	r3, [r2, #24]
 687 0104 BBE7     		b	.L42
 688              	.L43:
 140:Core/Inc/lcd_stm32f0.c ****     }
 689              		.loc 2 140 6 is_stmt 1 view .LVU183
 140:Core/Inc/lcd_stm32f0.c ****     }
 690              		.loc 2 140 11 is_stmt 0 view .LVU184
 691 0106 084A     		ldr	r2, .L48+4
 692 0108 9169     		ldr	r1, [r2, #24]
 140:Core/Inc/lcd_stm32f0.c ****     }
ARM GAS  /tmp/cc1MGoPr.s 			page 22


 693              		.loc 2 140 18 view .LVU185
 694 010a 8023     		movs	r3, #128
 695 010c 9B04     		lsls	r3, r3, #18
 696 010e 0B43     		orrs	r3, r1
 697 0110 9361     		str	r3, [r2, #24]
 698 0112 BCE7     		b	.L44
 699              	.L45:
 149:Core/Inc/lcd_stm32f0.c ****     }
 700              		.loc 2 149 6 is_stmt 1 view .LVU186
 149:Core/Inc/lcd_stm32f0.c ****     }
 701              		.loc 2 149 11 is_stmt 0 view .LVU187
 702 0114 044A     		ldr	r2, .L48+4
 703 0116 9169     		ldr	r1, [r2, #24]
 149:Core/Inc/lcd_stm32f0.c ****     }
 704              		.loc 2 149 18 view .LVU188
 705 0118 8023     		movs	r3, #128
 706 011a 5B04     		lsls	r3, r3, #17
 707 011c 0B43     		orrs	r3, r1
 708 011e 9361     		str	r3, [r2, #24]
 709 0120 BDE7     		b	.L46
 710              	.L49:
 711 0122 C046     		.align	2
 712              	.L48:
 713 0124 00080048 		.word	1207961600
 714 0128 00040048 		.word	1207960576
 715 012c B80B0000 		.word	3000
 716              		.cfi_endproc
 717              	.LFE40:
 719              		.section	.text.init_LCD,"ax",%progbits
 720              		.align	1
 721              		.global	init_LCD
 722              		.syntax unified
 723              		.code	16
 724              		.thumb_func
 726              	init_LCD:
 727              	.LFB41:
 168:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 728              		.loc 2 168 1 is_stmt 1 view -0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732 0000 10B5     		push	{r4, lr}
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 4, -8
 735              		.cfi_offset 14, -4
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 736              		.loc 2 169 5 view .LVU190
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 737              		.loc 2 169 8 is_stmt 0 view .LVU191
 738 0002 1B4B     		ldr	r3, .L51
 739 0004 5969     		ldr	r1, [r3, #20]
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 740              		.loc 2 169 17 view .LVU192
 741 0006 8022     		movs	r2, #128
 742 0008 9202     		lsls	r2, r2, #10
 743 000a 0A43     		orrs	r2, r1
 744 000c 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/cc1MGoPr.s 			page 23


 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 745              		.loc 2 170 5 is_stmt 1 view .LVU193
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 746              		.loc 2 170 8 is_stmt 0 view .LVU194
 747 000e 5969     		ldr	r1, [r3, #20]
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 748              		.loc 2 170 17 view .LVU195
 749 0010 8022     		movs	r2, #128
 750 0012 D202     		lsls	r2, r2, #11
 751 0014 0A43     		orrs	r2, r1
 752 0016 5A61     		str	r2, [r3, #20]
 171:Core/Inc/lcd_stm32f0.c **** 
 753              		.loc 2 171 5 is_stmt 1 view .LVU196
 171:Core/Inc/lcd_stm32f0.c **** 
 754              		.loc 2 171 8 is_stmt 0 view .LVU197
 755 0018 5969     		ldr	r1, [r3, #20]
 171:Core/Inc/lcd_stm32f0.c **** 
 756              		.loc 2 171 17 view .LVU198
 757 001a 8022     		movs	r2, #128
 758 001c 1203     		lsls	r2, r2, #12
 759 001e 0A43     		orrs	r2, r1
 760 0020 5A61     		str	r2, [r3, #20]
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 761              		.loc 2 173 5 is_stmt 1 view .LVU199
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 762              		.loc 2 173 10 is_stmt 0 view .LVU200
 763 0022 9022     		movs	r2, #144
 764 0024 D205     		lsls	r2, r2, #23
 765 0026 1168     		ldr	r1, [r2]
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 766              		.loc 2 173 18 view .LVU201
 767 0028 8223     		movs	r3, #130
 768 002a DB05     		lsls	r3, r3, #23
 769 002c 0B43     		orrs	r3, r1
 770 002e 1360     		str	r3, [r2]
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 771              		.loc 2 174 5 is_stmt 1 view .LVU202
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 772              		.loc 2 174 10 is_stmt 0 view .LVU203
 773 0030 104A     		ldr	r2, .L51+4
 774 0032 1168     		ldr	r1, [r2]
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 775              		.loc 2 174 18 view .LVU204
 776 0034 A023     		movs	r3, #160
 777 0036 DB02     		lsls	r3, r3, #11
 778 0038 0B43     		orrs	r3, r1
 779 003a 1360     		str	r3, [r2]
 175:Core/Inc/lcd_stm32f0.c **** 
 780              		.loc 2 175 5 is_stmt 1 view .LVU205
 175:Core/Inc/lcd_stm32f0.c **** 
 781              		.loc 2 175 10 is_stmt 0 view .LVU206
 782 003c 0E4A     		ldr	r2, .L51+8
 783 003e 1168     		ldr	r1, [r2]
 175:Core/Inc/lcd_stm32f0.c **** 
 784              		.loc 2 175 18 view .LVU207
 785 0040 A023     		movs	r3, #160
 786 0042 DB05     		lsls	r3, r3, #23
ARM GAS  /tmp/cc1MGoPr.s 			page 24


 787 0044 0B43     		orrs	r3, r1
 788 0046 1360     		str	r3, [r2]
 177:Core/Inc/lcd_stm32f0.c **** 
 789              		.loc 2 177 5 is_stmt 1 view .LVU208
 790 0048 0C48     		ldr	r0, .L51+12
 791 004a FFF7FEFF 		bl	delay
 792              	.LVL24:
 179:Core/Inc/lcd_stm32f0.c ****     lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 793              		.loc 2 179 5 view .LVU209
 794 004e 3320     		movs	r0, #51
 795 0050 FFF7FEFF 		bl	lcd_command
 796              	.LVL25:
 180:Core/Inc/lcd_stm32f0.c ****     lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 797              		.loc 2 180 5 view .LVU210
 798 0054 3220     		movs	r0, #50
 799 0056 FFF7FEFF 		bl	lcd_command
 800              	.LVL26:
 181:Core/Inc/lcd_stm32f0.c ****     lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 801              		.loc 2 181 5 view .LVU211
 802 005a 0C20     		movs	r0, #12
 803 005c FFF7FEFF 		bl	lcd_command
 804              	.LVL27:
 182:Core/Inc/lcd_stm32f0.c ****     lcd_command(CLEAR);			// Clear display
 805              		.loc 2 182 5 view .LVU212
 806 0060 2820     		movs	r0, #40
 807 0062 FFF7FEFF 		bl	lcd_command
 808              	.LVL28:
 183:Core/Inc/lcd_stm32f0.c **** }
 809              		.loc 2 183 5 view .LVU213
 810 0066 0120     		movs	r0, #1
 811 0068 FFF7FEFF 		bl	lcd_command
 812              	.LVL29:
 184:Core/Inc/lcd_stm32f0.c **** 
 813              		.loc 2 184 1 is_stmt 0 view .LVU214
 814              		@ sp needed
 815 006c 10BD     		pop	{r4, pc}
 816              	.L52:
 817 006e C046     		.align	2
 818              	.L51:
 819 0070 00100240 		.word	1073876992
 820 0074 00040048 		.word	1207960576
 821 0078 00080048 		.word	1207961600
 822 007c 30750000 		.word	30000
 823              		.cfi_endproc
 824              	.LFE41:
 826              		.section	.text.initGPIO,"ax",%progbits
 827              		.align	1
 828              		.global	initGPIO
 829              		.syntax unified
 830              		.code	16
 831              		.thumb_func
 833              	initGPIO:
 834              	.LFB47:
   1:Core/Src/main.c **** //********************************************************************
   2:Core/Src/main.c **** //*                    EEE2046F C template                           *
   3:Core/Src/main.c **** //*==================================================================*
   4:Core/Src/main.c **** //* WRITTEN BY: Tapera Chikumbu  	            		             *
ARM GAS  /tmp/cc1MGoPr.s 			page 25


   5:Core/Src/main.c **** //* DATE CREATED: 10/05/2023                                         *
   6:Core/Src/main.c **** //* MODIFIED: 12/05/2023                                             *
   7:Core/Src/main.c **** //*==================================================================*
   8:Core/Src/main.c **** //* PROGRAMMED IN: Visual Studio Code                                *
   9:Core/Src/main.c **** //* TARGET:        STM32F0                                           *
  10:Core/Src/main.c **** //*==================================================================*
  11:Core/Src/main.c **** //* DESCRIPTION:                                                     *
  12:Core/Src/main.c **** //*                                                                  *
  13:Core/Src/main.c **** //********************************************************************
  14:Core/Src/main.c **** // INCLUDE FILES
  15:Core/Src/main.c **** //====================================================================
  16:Core/Src/main.c **** #include "stm32f0xx.h"
  17:Core/Src/main.c **** #include <lcd_stm32f0.c>
  18:Core/Src/main.c **** //====================================================================
  19:Core/Src/main.c **** // GLOBAL CONSTANTS
  20:Core/Src/main.c **** //====================================================================
  21:Core/Src/main.c **** #define TRUE 1
  22:Core/Src/main.c **** #define FALSE 0
  23:Core/Src/main.c **** typedef uint8_t flag_t;
  24:Core/Src/main.c **** //====================================================================
  25:Core/Src/main.c **** // GLOBAL VARIABLES
  26:Core/Src/main.c **** //====================================================================
  27:Core/Src/main.c **** char time[] = ">     -    -  - -"; //char representation of time
  28:Core/Src/main.c **** uint8_t minutes = 0, seconds = 0, hundredths = 0;
  29:Core/Src/main.c **** flag_t startFlag = FALSE, lapFlag = FALSE, stopFlag = FALSE, resetFlag = TRUE;
  30:Core/Src/main.c **** //====================================================================
  31:Core/Src/main.c **** // FUNCTION DECLARATIONS
  32:Core/Src/main.c **** //====================================================================
  33:Core/Src/main.c **** void display(void);
  34:Core/Src/main.c **** void checkPB(void);
  35:Core/Src/main.c **** void initGPIO(void);
  36:Core/Src/main.c **** void initTIM14(void);
  37:Core/Src/main.c **** void TIM14_IRQHandler(void);
  38:Core/Src/main.c **** void convert2BCDASCII(const uint8_t min, const uint8_t sec, const uint8_t hund, char* resultPtr);
  39:Core/Src/main.c **** //====================================================================
  40:Core/Src/main.c **** // MAIN FUNCTION
  41:Core/Src/main.c **** //====================================================================
  42:Core/Src/main.c **** int main (void) {   
  43:Core/Src/main.c ****     init_LCD();
  44:Core/Src/main.c ****     initGPIO();
  45:Core/Src/main.c ****     initTIM14();
  46:Core/Src/main.c ****     lcd_command(CLEAR);
  47:Core/Src/main.c ****     while (1){
  48:Core/Src/main.c ****         display();
  49:Core/Src/main.c ****     }
  50:Core/Src/main.c **** }							// End of main
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** //====================================================================
  53:Core/Src/main.c **** // FUNCTION DEFINITIONS
  54:Core/Src/main.c **** //====================================================================
  55:Core/Src/main.c **** void initGPIO(void){
 835              		.loc 1 55 20 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		@ link register save eliminated.
  56:Core/Src/main.c ****     //init input
ARM GAS  /tmp/cc1MGoPr.s 			page 26


  57:Core/Src/main.c ****     RCC -> AHBENR |= RCC_AHBENR_GPIOAEN;
 840              		.loc 1 57 5 view .LVU216
 841              		.loc 1 57 9 is_stmt 0 view .LVU217
 842 0000 0E4B     		ldr	r3, .L54
 843 0002 5969     		ldr	r1, [r3, #20]
 844              		.loc 1 57 19 view .LVU218
 845 0004 8022     		movs	r2, #128
 846 0006 9202     		lsls	r2, r2, #10
 847 0008 0A43     		orrs	r2, r1
 848 000a 5A61     		str	r2, [r3, #20]
  58:Core/Src/main.c ****     GPIOA -> MODER &= ~(GPIO_MODER_MODER0|
 849              		.loc 1 58 5 is_stmt 1 view .LVU219
 850              		.loc 1 58 11 is_stmt 0 view .LVU220
 851 000c 9022     		movs	r2, #144
 852 000e D205     		lsls	r2, r2, #23
 853 0010 1168     		ldr	r1, [r2]
 854              		.loc 1 58 20 view .LVU221
 855 0012 FF20     		movs	r0, #255
 856 0014 8143     		bics	r1, r0
 857 0016 1160     		str	r1, [r2]
  59:Core/Src/main.c ****                         GPIO_MODER_MODER1|
  60:Core/Src/main.c ****                         GPIO_MODER_MODER2|
  61:Core/Src/main.c ****                         GPIO_MODER_MODER3);
  62:Core/Src/main.c ****     GPIOA -> PUPDR |= 0x00000055; 
 858              		.loc 1 62 5 is_stmt 1 view .LVU222
 859              		.loc 1 62 11 is_stmt 0 view .LVU223
 860 0018 D168     		ldr	r1, [r2, #12]
 861              		.loc 1 62 20 view .LVU224
 862 001a AA38     		subs	r0, r0, #170
 863 001c 0143     		orrs	r1, r0
 864 001e D160     		str	r1, [r2, #12]
  63:Core/Src/main.c ****     //init output
  64:Core/Src/main.c ****     RCC -> AHBENR |= RCC_AHBENR_GPIOBEN;
 865              		.loc 1 64 5 is_stmt 1 view .LVU225
 866              		.loc 1 64 9 is_stmt 0 view .LVU226
 867 0020 5969     		ldr	r1, [r3, #20]
 868              		.loc 1 64 19 view .LVU227
 869 0022 8022     		movs	r2, #128
 870 0024 D202     		lsls	r2, r2, #11
 871 0026 0A43     		orrs	r2, r1
 872 0028 5A61     		str	r2, [r3, #20]
  65:Core/Src/main.c ****     GPIOB -> MODER |= 0x00005555;
 873              		.loc 1 65 5 is_stmt 1 view .LVU228
 874              		.loc 1 65 11 is_stmt 0 view .LVU229
 875 002a 054B     		ldr	r3, .L54+4
 876 002c 1968     		ldr	r1, [r3]
 877              		.loc 1 65 20 view .LVU230
 878 002e 054A     		ldr	r2, .L54+8
 879 0030 0A43     		orrs	r2, r1
 880 0032 1A60     		str	r2, [r3]
  66:Core/Src/main.c ****     GPIOB -> ODR = 0;
 881              		.loc 1 66 5 is_stmt 1 view .LVU231
 882              		.loc 1 66 18 is_stmt 0 view .LVU232
 883 0034 0022     		movs	r2, #0
 884 0036 5A61     		str	r2, [r3, #20]
  67:Core/Src/main.c **** }
 885              		.loc 1 67 1 view .LVU233
ARM GAS  /tmp/cc1MGoPr.s 			page 27


 886              		@ sp needed
 887 0038 7047     		bx	lr
 888              	.L55:
 889 003a C046     		.align	2
 890              	.L54:
 891 003c 00100240 		.word	1073876992
 892 0040 00040048 		.word	1207960576
 893 0044 55550000 		.word	21845
 894              		.cfi_endproc
 895              	.LFE47:
 897              		.section	.text.initTIM14,"ax",%progbits
 898              		.align	1
 899              		.global	initTIM14
 900              		.syntax unified
 901              		.code	16
 902              		.thumb_func
 904              	initTIM14:
 905              	.LFB48:
  68:Core/Src/main.c **** void initTIM14(void){
 906              		.loc 1 68 21 is_stmt 1 view -0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              		@ link register save eliminated.
  69:Core/Src/main.c ****     RCC ->APB1ENR |= RCC_APB1ENR_TIM14EN;
 911              		.loc 1 69 5 view .LVU235
 912              		.loc 1 69 9 is_stmt 0 view .LVU236
 913 0000 0A4A     		ldr	r2, .L57
 914 0002 D169     		ldr	r1, [r2, #28]
 915              		.loc 1 69 19 view .LVU237
 916 0004 8023     		movs	r3, #128
 917 0006 5B00     		lsls	r3, r3, #1
 918 0008 0B43     		orrs	r3, r1
 919 000a D361     		str	r3, [r2, #28]
  70:Core/Src/main.c ****     TIM14 -> PSC = 1;
 920              		.loc 1 70 5 is_stmt 1 view .LVU238
 921              		.loc 1 70 18 is_stmt 0 view .LVU239
 922 000c 084B     		ldr	r3, .L57+4
 923 000e 0121     		movs	r1, #1
 924 0010 9962     		str	r1, [r3, #40]
  71:Core/Src/main.c ****     TIM14 -> ARR = 39999;
 925              		.loc 1 71 5 is_stmt 1 view .LVU240
 926              		.loc 1 71 18 is_stmt 0 view .LVU241
 927 0012 084A     		ldr	r2, .L57+8
 928 0014 DA62     		str	r2, [r3, #44]
  72:Core/Src/main.c ****     TIM14 -> DIER |= TIM_DIER_UIE; //Enable interrupts
 929              		.loc 1 72 5 is_stmt 1 view .LVU242
 930              		.loc 1 72 11 is_stmt 0 view .LVU243
 931 0016 DA68     		ldr	r2, [r3, #12]
 932              		.loc 1 72 19 view .LVU244
 933 0018 0A43     		orrs	r2, r1
 934 001a DA60     		str	r2, [r3, #12]
  73:Core/Src/main.c ****     TIM14 -> CR1 &= ~(TIM_CR1_CEN);
 935              		.loc 1 73 5 is_stmt 1 view .LVU245
 936              		.loc 1 73 11 is_stmt 0 view .LVU246
 937 001c 1A68     		ldr	r2, [r3]
 938              		.loc 1 73 18 view .LVU247
ARM GAS  /tmp/cc1MGoPr.s 			page 28


 939 001e 8A43     		bics	r2, r1
 940 0020 1A60     		str	r2, [r3]
  74:Core/Src/main.c ****     NVIC_EnableIRQ(TIM14_IRQn);   
 941              		.loc 1 74 5 is_stmt 1 view .LVU248
 942              	.LVL30:
 943              	.LBB4:
 944              	.LBI4:
 945              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc1MGoPr.s 			page 29


  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/cc1MGoPr.s 			page 30


 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
ARM GAS  /tmp/cc1MGoPr.s 			page 31


 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
ARM GAS  /tmp/cc1MGoPr.s 			page 32


 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
ARM GAS  /tmp/cc1MGoPr.s 			page 33


 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
ARM GAS  /tmp/cc1MGoPr.s 			page 34


 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc1MGoPr.s 			page 35


 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
ARM GAS  /tmp/cc1MGoPr.s 			page 36


 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/cc1MGoPr.s 			page 37


 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/cc1MGoPr.s 			page 38


 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
ARM GAS  /tmp/cc1MGoPr.s 			page 39


 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 946              		.loc 3 623 22 view .LVU249
 947              	.LBB5:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 948              		.loc 3 625 3 view .LVU250
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 949              		.loc 3 627 5 view .LVU251
 950              		.loc 3 627 20 is_stmt 0 view .LVU252
 951 0022 054B     		ldr	r3, .L57+12
 952 0024 8022     		movs	r2, #128
 953 0026 1203     		lsls	r2, r2, #12
 954 0028 1A60     		str	r2, [r3]
 955              	.LVL31:
 956              		.loc 3 627 20 view .LVU253
 957              	.LBE5:
 958              	.LBE4:
  75:Core/Src/main.c **** }
 959              		.loc 1 75 1 view .LVU254
 960              		@ sp needed
 961 002a 7047     		bx	lr
 962              	.L58:
 963              		.align	2
 964              	.L57:
 965 002c 00100240 		.word	1073876992
 966 0030 00200040 		.word	1073750016
 967 0034 3F9C0000 		.word	39999
 968 0038 00E100E0 		.word	-536813312
 969              		.cfi_endproc
 970              	.LFE48:
 972              		.section	.text.TIM14_IRQHandler,"ax",%progbits
 973              		.align	1
 974              		.global	TIM14_IRQHandler
 975              		.syntax unified
 976              		.code	16
 977              		.thumb_func
 979              	TIM14_IRQHandler:
 980              	.LFB49:
  76:Core/Src/main.c **** void TIM14_IRQHandler(void){
 981              		.loc 1 76 28 is_stmt 1 view -0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 0
 984              		@ frame_needed = 0, uses_anonymous_args = 0
 985              		@ link register save eliminated.
  77:Core/Src/main.c ****     ++hundredths;
 986              		.loc 1 77 5 view .LVU256
 987 0000 164A     		ldr	r2, .L66
 988 0002 1378     		ldrb	r3, [r2]
 989 0004 0133     		adds	r3, r3, #1
 990 0006 DBB2     		uxtb	r3, r3
 991 0008 1370     		strb	r3, [r2]
  78:Core/Src/main.c ****     if (hundredths == 100){ //Overflow in hundredths. Reset and increase seconds
 992              		.loc 1 78 5 view .LVU257
ARM GAS  /tmp/cc1MGoPr.s 			page 40


 993              		.loc 1 78 8 is_stmt 0 view .LVU258
 994 000a 642B     		cmp	r3, #100
 995 000c 0DD0     		beq	.L63
 996              	.L60:
  79:Core/Src/main.c ****         hundredths = 0;
  80:Core/Src/main.c ****         ++seconds;
  81:Core/Src/main.c ****     }
  82:Core/Src/main.c ****     if (seconds == 60){ //Overflow in seconds. Reset and increase minutes
 997              		.loc 1 82 5 is_stmt 1 view .LVU259
 998              		.loc 1 82 17 is_stmt 0 view .LVU260
 999 000e 144B     		ldr	r3, .L66+4
 1000 0010 1B78     		ldrb	r3, [r3]
 1001              		.loc 1 82 8 view .LVU261
 1002 0012 3C2B     		cmp	r3, #60
 1003 0014 11D0     		beq	.L64
 1004              	.L61:
  83:Core/Src/main.c ****         seconds = 0;
  84:Core/Src/main.c ****         ++minutes;
  85:Core/Src/main.c ****     }
  86:Core/Src/main.c ****     if (minutes == 100){ //Overflow in minutes. Reset all values
 1005              		.loc 1 86 5 is_stmt 1 view .LVU262
 1006              		.loc 1 86 17 is_stmt 0 view .LVU263
 1007 0016 134B     		ldr	r3, .L66+8
 1008 0018 1B78     		ldrb	r3, [r3]
 1009              		.loc 1 86 8 view .LVU264
 1010 001a 642B     		cmp	r3, #100
 1011 001c 15D0     		beq	.L65
 1012              	.L62:
  87:Core/Src/main.c ****         hundredths = 0;
  88:Core/Src/main.c ****         seconds = 0;
  89:Core/Src/main.c ****         minutes = 0;
  90:Core/Src/main.c ****     }
  91:Core/Src/main.c ****     TIM14->SR &= ~(TIM_SR_UIF);
 1013              		.loc 1 91 5 is_stmt 1 view .LVU265
 1014              		.loc 1 91 10 is_stmt 0 view .LVU266
 1015 001e 124A     		ldr	r2, .L66+12
 1016 0020 1369     		ldr	r3, [r2, #16]
 1017              		.loc 1 91 15 view .LVU267
 1018 0022 0121     		movs	r1, #1
 1019 0024 8B43     		bics	r3, r1
 1020 0026 1361     		str	r3, [r2, #16]
  92:Core/Src/main.c **** }
 1021              		.loc 1 92 1 view .LVU268
 1022              		@ sp needed
 1023 0028 7047     		bx	lr
 1024              	.L63:
  79:Core/Src/main.c ****         ++seconds;
 1025              		.loc 1 79 9 is_stmt 1 view .LVU269
  79:Core/Src/main.c ****         ++seconds;
 1026              		.loc 1 79 20 is_stmt 0 view .LVU270
 1027 002a 1300     		movs	r3, r2
 1028 002c 0022     		movs	r2, #0
 1029 002e 1A70     		strb	r2, [r3]
  80:Core/Src/main.c ****     }
 1030              		.loc 1 80 9 is_stmt 1 view .LVU271
 1031 0030 0B4A     		ldr	r2, .L66+4
 1032 0032 1378     		ldrb	r3, [r2]
ARM GAS  /tmp/cc1MGoPr.s 			page 41


 1033 0034 0133     		adds	r3, r3, #1
 1034 0036 1370     		strb	r3, [r2]
 1035 0038 E9E7     		b	.L60
 1036              	.L64:
  83:Core/Src/main.c ****         ++minutes;
 1037              		.loc 1 83 9 view .LVU272
  83:Core/Src/main.c ****         ++minutes;
 1038              		.loc 1 83 17 is_stmt 0 view .LVU273
 1039 003a 094B     		ldr	r3, .L66+4
 1040 003c 0022     		movs	r2, #0
 1041 003e 1A70     		strb	r2, [r3]
  84:Core/Src/main.c ****     }
 1042              		.loc 1 84 9 is_stmt 1 view .LVU274
 1043 0040 084A     		ldr	r2, .L66+8
 1044 0042 1378     		ldrb	r3, [r2]
 1045 0044 0133     		adds	r3, r3, #1
 1046 0046 1370     		strb	r3, [r2]
 1047 0048 E5E7     		b	.L61
 1048              	.L65:
  87:Core/Src/main.c ****         seconds = 0;
 1049              		.loc 1 87 9 view .LVU275
  87:Core/Src/main.c ****         seconds = 0;
 1050              		.loc 1 87 20 is_stmt 0 view .LVU276
 1051 004a 044A     		ldr	r2, .L66
 1052 004c 0023     		movs	r3, #0
 1053 004e 1370     		strb	r3, [r2]
  88:Core/Src/main.c ****         minutes = 0;
 1054              		.loc 1 88 9 is_stmt 1 view .LVU277
  88:Core/Src/main.c ****         minutes = 0;
 1055              		.loc 1 88 17 is_stmt 0 view .LVU278
 1056 0050 034A     		ldr	r2, .L66+4
 1057 0052 1370     		strb	r3, [r2]
  89:Core/Src/main.c ****     }
 1058              		.loc 1 89 9 is_stmt 1 view .LVU279
  89:Core/Src/main.c ****     }
 1059              		.loc 1 89 17 is_stmt 0 view .LVU280
 1060 0054 034A     		ldr	r2, .L66+8
 1061 0056 1370     		strb	r3, [r2]
 1062 0058 E1E7     		b	.L62
 1063              	.L67:
 1064 005a C046     		.align	2
 1065              	.L66:
 1066 005c 00000000 		.word	hundredths
 1067 0060 00000000 		.word	seconds
 1068 0064 00000000 		.word	minutes
 1069 0068 00200040 		.word	1073750016
 1070              		.cfi_endproc
 1071              	.LFE49:
 1073              		.section	.text.checkPB,"ax",%progbits
 1074              		.align	1
 1075              		.global	checkPB
 1076              		.syntax unified
 1077              		.code	16
 1078              		.thumb_func
 1080              	checkPB:
 1081              	.LFB51:
  93:Core/Src/main.c **** void display(void){
ARM GAS  /tmp/cc1MGoPr.s 			page 42


  94:Core/Src/main.c ****     checkPB();
  95:Core/Src/main.c ****     if (resetFlag){ //Clear time and show reset message
  96:Core/Src/main.c ****         GPIOB ->ODR = 0b1000;
  97:Core/Src/main.c ****         hundredths = 0;
  98:Core/Src/main.c ****         seconds = 0;
  99:Core/Src/main.c ****         minutes = 0;
 100:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 101:Core/Src/main.c ****         lcd_command(CURSOR_HOME);
 102:Core/Src/main.c ****         lcd_putstring("Button Game");
 103:Core/Src/main.c ****         lcd_command(LINE_TWO);
 104:Core/Src/main.c ****         lcd_putstring("Press SW0...");
 105:Core/Src/main.c ****     }
 106:Core/Src/main.c ****     if (startFlag && lapFlag){ //Show current time. Keep counting in background
 107:Core/Src/main.c ****         GPIOB ->ODR = 0b0010;
 108:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 109:Core/Src/main.c ****     }
 110:Core/Src/main.c ****     else if (startFlag && stopFlag){ //Show current time and stop counting
 111:Core/Src/main.c ****         GPIOB->ODR = 0b0100;
 112:Core/Src/main.c ****         TIM14 -> CR1 &= ~(TIM_CR1_CEN); //Stop timer
 113:Core/Src/main.c ****         lcd_command(CLEAR);
 114:Core/Src/main.c ****         lcd_putstring("Time");
 115:Core/Src/main.c ****         lcd_command(LINE_TWO);
 116:Core/Src/main.c ****         lcd_putstring(time);
 117:Core/Src/main.c ****         delay(10000);
 118:Core/Src/main.c ****     }
 119:Core/Src/main.c ****     else if (startFlag){ //Start counter from current value. Show values as they increase
 120:Core/Src/main.c ****         GPIOB ->ODR = 0b0001;
 121:Core/Src/main.c ****         TIM14 -> CR1 |= TIM_CR1_CEN; //Start timer
 122:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 123:Core/Src/main.c ****         lcd_command(CLEAR);
 124:Core/Src/main.c ****         lcd_putstring("Time");
 125:Core/Src/main.c ****         lcd_command(LINE_TWO);
 126:Core/Src/main.c ****         lcd_putstring(time);
 127:Core/Src/main.c ****         delay(10000);
 128:Core/Src/main.c ****     }
 129:Core/Src/main.c **** }
 130:Core/Src/main.c **** void checkPB(void){
 1082              		.loc 1 130 19 is_stmt 1 view -0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 0
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 1086              		@ link register save eliminated.
 131:Core/Src/main.c ****     uint16_t state = (0b1111 & ~(GPIOA -> IDR));
 1087              		.loc 1 131 5 view .LVU282
 1088              		.loc 1 131 40 is_stmt 0 view .LVU283
 1089 0000 9023     		movs	r3, #144
 1090 0002 DB05     		lsls	r3, r3, #23
 1091 0004 1A69     		ldr	r2, [r3, #16]
 1092              		.loc 1 131 14 view .LVU284
 1093 0006 0F23     		movs	r3, #15
 1094 0008 9343     		bics	r3, r2
 1095              	.LVL32:
 132:Core/Src/main.c ****     if (state == 0b0001){ //SWO to start
 1096              		.loc 1 132 5 is_stmt 1 view .LVU285
 1097              		.loc 1 132 8 is_stmt 0 view .LVU286
 1098 000a 012B     		cmp	r3, #1
 1099 000c 10D0     		beq	.L73
ARM GAS  /tmp/cc1MGoPr.s 			page 43


 133:Core/Src/main.c ****         startFlag = TRUE;
 134:Core/Src/main.c ****         stopFlag = FALSE;
 135:Core/Src/main.c ****         lapFlag = FALSE;
 136:Core/Src/main.c ****         resetFlag = FALSE;
 137:Core/Src/main.c ****     }
 138:Core/Src/main.c ****     else if (state == 0b0010) { //SW1 to lap
 1100              		.loc 1 138 10 is_stmt 1 view .LVU287
 1101              		.loc 1 138 13 is_stmt 0 view .LVU288
 1102 000e 022B     		cmp	r3, #2
 1103 0010 19D0     		beq	.L74
 139:Core/Src/main.c ****         startFlag = TRUE;
 140:Core/Src/main.c ****         stopFlag = FALSE;
 141:Core/Src/main.c ****         lapFlag = TRUE;
 142:Core/Src/main.c ****         resetFlag = FALSE;
 143:Core/Src/main.c ****     }
 144:Core/Src/main.c ****     else if (state == 0b0100) { //SW2 to stop
 1104              		.loc 1 144 10 is_stmt 1 view .LVU289
 1105              		.loc 1 144 13 is_stmt 0 view .LVU290
 1106 0012 042B     		cmp	r3, #4
 1107 0014 22D0     		beq	.L75
 145:Core/Src/main.c ****         startFlag = TRUE;
 146:Core/Src/main.c ****         stopFlag = TRUE;
 147:Core/Src/main.c ****         lapFlag = FALSE;
 148:Core/Src/main.c ****         resetFlag = FALSE;
 149:Core/Src/main.c ****     }
 150:Core/Src/main.c ****     else if (state == 0b1000) { //SW3 to reset
 1108              		.loc 1 150 10 is_stmt 1 view .LVU291
 1109              		.loc 1 150 13 is_stmt 0 view .LVU292
 1110 0016 082B     		cmp	r3, #8
 1111 0018 14D1     		bne	.L68
 151:Core/Src/main.c ****         startFlag = FALSE;
 1112              		.loc 1 151 9 is_stmt 1 view .LVU293
 1113              		.loc 1 151 19 is_stmt 0 view .LVU294
 1114 001a 164A     		ldr	r2, .L76
 1115 001c 0023     		movs	r3, #0
 1116              	.LVL33:
 1117              		.loc 1 151 19 view .LVU295
 1118 001e 1370     		strb	r3, [r2]
 152:Core/Src/main.c ****         stopFlag = FALSE;
 1119              		.loc 1 152 9 is_stmt 1 view .LVU296
 1120              		.loc 1 152 18 is_stmt 0 view .LVU297
 1121 0020 154A     		ldr	r2, .L76+4
 1122 0022 1370     		strb	r3, [r2]
 153:Core/Src/main.c ****         lapFlag = FALSE;
 1123              		.loc 1 153 9 is_stmt 1 view .LVU298
 1124              		.loc 1 153 17 is_stmt 0 view .LVU299
 1125 0024 154A     		ldr	r2, .L76+8
 1126 0026 1370     		strb	r3, [r2]
 154:Core/Src/main.c ****         resetFlag = TRUE;
 1127              		.loc 1 154 9 is_stmt 1 view .LVU300
 1128              		.loc 1 154 19 is_stmt 0 view .LVU301
 1129 0028 154B     		ldr	r3, .L76+12
 1130 002a 0122     		movs	r2, #1
 1131 002c 1A70     		strb	r2, [r3]
 155:Core/Src/main.c ****     }
 156:Core/Src/main.c **** }
 1132              		.loc 1 156 1 view .LVU302
ARM GAS  /tmp/cc1MGoPr.s 			page 44


 1133 002e 09E0     		b	.L68
 1134              	.LVL34:
 1135              	.L73:
 133:Core/Src/main.c ****         stopFlag = FALSE;
 1136              		.loc 1 133 9 is_stmt 1 view .LVU303
 133:Core/Src/main.c ****         stopFlag = FALSE;
 1137              		.loc 1 133 19 is_stmt 0 view .LVU304
 1138 0030 104B     		ldr	r3, .L76
 1139              	.LVL35:
 133:Core/Src/main.c ****         stopFlag = FALSE;
 1140              		.loc 1 133 19 view .LVU305
 1141 0032 0122     		movs	r2, #1
 1142              	.LVL36:
 133:Core/Src/main.c ****         stopFlag = FALSE;
 1143              		.loc 1 133 19 view .LVU306
 1144 0034 1A70     		strb	r2, [r3]
 134:Core/Src/main.c ****         lapFlag = FALSE;
 1145              		.loc 1 134 9 is_stmt 1 view .LVU307
 134:Core/Src/main.c ****         lapFlag = FALSE;
 1146              		.loc 1 134 18 is_stmt 0 view .LVU308
 1147 0036 104A     		ldr	r2, .L76+4
 1148 0038 0023     		movs	r3, #0
 1149 003a 1370     		strb	r3, [r2]
 135:Core/Src/main.c ****         resetFlag = FALSE;
 1150              		.loc 1 135 9 is_stmt 1 view .LVU309
 135:Core/Src/main.c ****         resetFlag = FALSE;
 1151              		.loc 1 135 17 is_stmt 0 view .LVU310
 1152 003c 0F4A     		ldr	r2, .L76+8
 1153 003e 1370     		strb	r3, [r2]
 136:Core/Src/main.c ****     }
 1154              		.loc 1 136 9 is_stmt 1 view .LVU311
 136:Core/Src/main.c ****     }
 1155              		.loc 1 136 19 is_stmt 0 view .LVU312
 1156 0040 0F4A     		ldr	r2, .L76+12
 1157 0042 1370     		strb	r3, [r2]
 1158              	.L68:
 1159              		.loc 1 156 1 view .LVU313
 1160              		@ sp needed
 1161 0044 7047     		bx	lr
 1162              	.LVL37:
 1163              	.L74:
 139:Core/Src/main.c ****         stopFlag = FALSE;
 1164              		.loc 1 139 9 is_stmt 1 view .LVU314
 139:Core/Src/main.c ****         stopFlag = FALSE;
 1165              		.loc 1 139 19 is_stmt 0 view .LVU315
 1166 0046 0B4B     		ldr	r3, .L76
 1167              	.LVL38:
 139:Core/Src/main.c ****         stopFlag = FALSE;
 1168              		.loc 1 139 19 view .LVU316
 1169 0048 0121     		movs	r1, #1
 1170 004a 1970     		strb	r1, [r3]
 140:Core/Src/main.c ****         lapFlag = TRUE;
 1171              		.loc 1 140 9 is_stmt 1 view .LVU317
 140:Core/Src/main.c ****         lapFlag = TRUE;
 1172              		.loc 1 140 18 is_stmt 0 view .LVU318
 1173 004c 0A4B     		ldr	r3, .L76+4
 1174 004e 0022     		movs	r2, #0
ARM GAS  /tmp/cc1MGoPr.s 			page 45


 1175              	.LVL39:
 140:Core/Src/main.c ****         lapFlag = TRUE;
 1176              		.loc 1 140 18 view .LVU319
 1177 0050 1A70     		strb	r2, [r3]
 141:Core/Src/main.c ****         resetFlag = FALSE;
 1178              		.loc 1 141 9 is_stmt 1 view .LVU320
 141:Core/Src/main.c ****         resetFlag = FALSE;
 1179              		.loc 1 141 17 is_stmt 0 view .LVU321
 1180 0052 0A4B     		ldr	r3, .L76+8
 1181 0054 1970     		strb	r1, [r3]
 142:Core/Src/main.c ****     }
 1182              		.loc 1 142 9 is_stmt 1 view .LVU322
 142:Core/Src/main.c ****     }
 1183              		.loc 1 142 19 is_stmt 0 view .LVU323
 1184 0056 0A4B     		ldr	r3, .L76+12
 1185 0058 1A70     		strb	r2, [r3]
 1186 005a F3E7     		b	.L68
 1187              	.LVL40:
 1188              	.L75:
 145:Core/Src/main.c ****         stopFlag = TRUE;
 1189              		.loc 1 145 9 is_stmt 1 view .LVU324
 145:Core/Src/main.c ****         stopFlag = TRUE;
 1190              		.loc 1 145 19 is_stmt 0 view .LVU325
 1191 005c 054B     		ldr	r3, .L76
 1192              	.LVL41:
 145:Core/Src/main.c ****         stopFlag = TRUE;
 1193              		.loc 1 145 19 view .LVU326
 1194 005e 0122     		movs	r2, #1
 1195              	.LVL42:
 145:Core/Src/main.c ****         stopFlag = TRUE;
 1196              		.loc 1 145 19 view .LVU327
 1197 0060 1A70     		strb	r2, [r3]
 146:Core/Src/main.c ****         lapFlag = FALSE;
 1198              		.loc 1 146 9 is_stmt 1 view .LVU328
 146:Core/Src/main.c ****         lapFlag = FALSE;
 1199              		.loc 1 146 18 is_stmt 0 view .LVU329
 1200 0062 054B     		ldr	r3, .L76+4
 1201 0064 1A70     		strb	r2, [r3]
 147:Core/Src/main.c ****         resetFlag = FALSE;
 1202              		.loc 1 147 9 is_stmt 1 view .LVU330
 147:Core/Src/main.c ****         resetFlag = FALSE;
 1203              		.loc 1 147 17 is_stmt 0 view .LVU331
 1204 0066 054B     		ldr	r3, .L76+8
 1205 0068 0022     		movs	r2, #0
 1206 006a 1A70     		strb	r2, [r3]
 148:Core/Src/main.c ****     }
 1207              		.loc 1 148 9 is_stmt 1 view .LVU332
 148:Core/Src/main.c ****     }
 1208              		.loc 1 148 19 is_stmt 0 view .LVU333
 1209 006c 044B     		ldr	r3, .L76+12
 1210 006e 1A70     		strb	r2, [r3]
 1211 0070 E8E7     		b	.L68
 1212              	.L77:
 1213 0072 C046     		.align	2
 1214              	.L76:
 1215 0074 00000000 		.word	startFlag
 1216 0078 00000000 		.word	stopFlag
ARM GAS  /tmp/cc1MGoPr.s 			page 46


 1217 007c 00000000 		.word	lapFlag
 1218 0080 00000000 		.word	resetFlag
 1219              		.cfi_endproc
 1220              	.LFE51:
 1222              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 1223              		.align	2
 1224              	.LC11:
 1225 0000 42757474 		.ascii	"Button Game\000"
 1225      6F6E2047 
 1225      616D6500 
 1226              		.align	2
 1227              	.LC13:
 1228 000c 50726573 		.ascii	"Press SW0...\000"
 1228      73205357 
 1228      302E2E2E 
 1228      00
 1229 0019 000000   		.align	2
 1230              	.LC18:
 1231 001c 54696D65 		.ascii	"Time\000"
 1231      00
 1232              		.section	.text.display,"ax",%progbits
 1233              		.align	1
 1234              		.global	display
 1235              		.syntax unified
 1236              		.code	16
 1237              		.thumb_func
 1239              	display:
 1240              	.LFB50:
  93:Core/Src/main.c ****     checkPB();
 1241              		.loc 1 93 19 is_stmt 1 view -0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245 0000 10B5     		push	{r4, lr}
 1246              		.cfi_def_cfa_offset 8
 1247              		.cfi_offset 4, -8
 1248              		.cfi_offset 14, -4
  94:Core/Src/main.c ****     if (resetFlag){ //Clear time and show reset message
 1249              		.loc 1 94 5 view .LVU335
 1250 0002 FFF7FEFF 		bl	checkPB
 1251              	.LVL43:
  95:Core/Src/main.c ****         GPIOB ->ODR = 0b1000;
 1252              		.loc 1 95 5 view .LVU336
  95:Core/Src/main.c ****         GPIOB ->ODR = 0b1000;
 1253              		.loc 1 95 9 is_stmt 0 view .LVU337
 1254 0006 2F4B     		ldr	r3, .L86
 1255 0008 1B78     		ldrb	r3, [r3]
  95:Core/Src/main.c ****         GPIOB ->ODR = 0b1000;
 1256              		.loc 1 95 8 view .LVU338
 1257 000a 002B     		cmp	r3, #0
 1258 000c 0BD1     		bne	.L83
 1259              	.L79:
 106:Core/Src/main.c ****         GPIOB ->ODR = 0b0010;
 1260              		.loc 1 106 5 is_stmt 1 view .LVU339
 106:Core/Src/main.c ****         GPIOB ->ODR = 0b0010;
 1261              		.loc 1 106 9 is_stmt 0 view .LVU340
 1262 000e 2E4B     		ldr	r3, .L86+4
ARM GAS  /tmp/cc1MGoPr.s 			page 47


 1263 0010 1B78     		ldrb	r3, [r3]
 106:Core/Src/main.c ****         GPIOB ->ODR = 0b0010;
 1264              		.loc 1 106 8 view .LVU341
 1265 0012 002B     		cmp	r3, #0
 1266 0014 1ED0     		beq	.L80
 106:Core/Src/main.c ****         GPIOB ->ODR = 0b0010;
 1267              		.loc 1 106 19 discriminator 1 view .LVU342
 1268 0016 2D4A     		ldr	r2, .L86+8
 1269 0018 1278     		ldrb	r2, [r2]
 1270 001a 002A     		cmp	r2, #0
 1271 001c 1AD0     		beq	.L80
 107:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 1272              		.loc 1 107 9 is_stmt 1 view .LVU343
 107:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 1273              		.loc 1 107 21 is_stmt 0 view .LVU344
 1274 001e 2C4B     		ldr	r3, .L86+12
 1275 0020 0222     		movs	r2, #2
 1276 0022 5A61     		str	r2, [r3, #20]
 1277 0024 1EE0     		b	.L78
 1278              	.L83:
  96:Core/Src/main.c ****         hundredths = 0;
 1279              		.loc 1 96 9 is_stmt 1 view .LVU345
  96:Core/Src/main.c ****         hundredths = 0;
 1280              		.loc 1 96 21 is_stmt 0 view .LVU346
 1281 0026 2A4B     		ldr	r3, .L86+12
 1282 0028 0822     		movs	r2, #8
 1283 002a 5A61     		str	r2, [r3, #20]
  97:Core/Src/main.c ****         seconds = 0;
 1284              		.loc 1 97 9 is_stmt 1 view .LVU347
  97:Core/Src/main.c ****         seconds = 0;
 1285              		.loc 1 97 20 is_stmt 0 view .LVU348
 1286 002c 294A     		ldr	r2, .L86+16
 1287 002e 0023     		movs	r3, #0
 1288 0030 1370     		strb	r3, [r2]
  98:Core/Src/main.c ****         minutes = 0;
 1289              		.loc 1 98 9 is_stmt 1 view .LVU349
  98:Core/Src/main.c ****         minutes = 0;
 1290              		.loc 1 98 17 is_stmt 0 view .LVU350
 1291 0032 294A     		ldr	r2, .L86+20
 1292 0034 1370     		strb	r3, [r2]
  99:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 1293              		.loc 1 99 9 is_stmt 1 view .LVU351
  99:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 1294              		.loc 1 99 17 is_stmt 0 view .LVU352
 1295 0036 294A     		ldr	r2, .L86+24
 1296 0038 1370     		strb	r3, [r2]
 101:Core/Src/main.c ****         lcd_putstring("Button Game");
 1297              		.loc 1 101 9 is_stmt 1 view .LVU353
 1298 003a 0220     		movs	r0, #2
 1299 003c FFF7FEFF 		bl	lcd_command
 1300              	.LVL44:
 102:Core/Src/main.c ****         lcd_command(LINE_TWO);
 1301              		.loc 1 102 9 view .LVU354
 1302 0040 2748     		ldr	r0, .L86+28
 1303 0042 FFF7FEFF 		bl	lcd_putstring
 1304              	.LVL45:
 103:Core/Src/main.c ****         lcd_putstring("Press SW0...");
ARM GAS  /tmp/cc1MGoPr.s 			page 48


 1305              		.loc 1 103 9 view .LVU355
 1306 0046 C020     		movs	r0, #192
 1307 0048 FFF7FEFF 		bl	lcd_command
 1308              	.LVL46:
 104:Core/Src/main.c ****     }
 1309              		.loc 1 104 9 view .LVU356
 1310 004c 2548     		ldr	r0, .L86+32
 1311 004e FFF7FEFF 		bl	lcd_putstring
 1312              	.LVL47:
 1313 0052 DCE7     		b	.L79
 1314              	.L80:
 110:Core/Src/main.c ****         GPIOB->ODR = 0b0100;
 1315              		.loc 1 110 10 view .LVU357
 110:Core/Src/main.c ****         GPIOB->ODR = 0b0100;
 1316              		.loc 1 110 13 is_stmt 0 view .LVU358
 1317 0054 002B     		cmp	r3, #0
 1318 0056 03D0     		beq	.L82
 110:Core/Src/main.c ****         GPIOB->ODR = 0b0100;
 1319              		.loc 1 110 24 discriminator 1 view .LVU359
 1320 0058 234A     		ldr	r2, .L86+36
 1321 005a 1278     		ldrb	r2, [r2]
 1322 005c 002A     		cmp	r2, #0
 1323 005e 02D1     		bne	.L84
 1324              	.L82:
 119:Core/Src/main.c ****         GPIOB ->ODR = 0b0001;
 1325              		.loc 1 119 10 is_stmt 1 view .LVU360
 119:Core/Src/main.c ****         GPIOB ->ODR = 0b0001;
 1326              		.loc 1 119 13 is_stmt 0 view .LVU361
 1327 0060 002B     		cmp	r3, #0
 1328 0062 18D1     		bne	.L85
 1329              	.L78:
 129:Core/Src/main.c **** void checkPB(void){
 1330              		.loc 1 129 1 view .LVU362
 1331              		@ sp needed
 1332 0064 10BD     		pop	{r4, pc}
 1333              	.L84:
 111:Core/Src/main.c ****         TIM14 -> CR1 &= ~(TIM_CR1_CEN); //Stop timer
 1334              		.loc 1 111 9 is_stmt 1 view .LVU363
 111:Core/Src/main.c ****         TIM14 -> CR1 &= ~(TIM_CR1_CEN); //Stop timer
 1335              		.loc 1 111 20 is_stmt 0 view .LVU364
 1336 0066 1A4B     		ldr	r3, .L86+12
 1337 0068 0422     		movs	r2, #4
 1338 006a 5A61     		str	r2, [r3, #20]
 112:Core/Src/main.c ****         lcd_command(CLEAR);
 1339              		.loc 1 112 9 is_stmt 1 view .LVU365
 112:Core/Src/main.c ****         lcd_command(CLEAR);
 1340              		.loc 1 112 15 is_stmt 0 view .LVU366
 1341 006c 1F4A     		ldr	r2, .L86+40
 1342 006e 1368     		ldr	r3, [r2]
 112:Core/Src/main.c ****         lcd_command(CLEAR);
 1343              		.loc 1 112 22 view .LVU367
 1344 0070 0121     		movs	r1, #1
 1345 0072 8B43     		bics	r3, r1
 1346 0074 1360     		str	r3, [r2]
 113:Core/Src/main.c ****         lcd_putstring("Time");
 1347              		.loc 1 113 9 is_stmt 1 view .LVU368
 1348 0076 0120     		movs	r0, #1
ARM GAS  /tmp/cc1MGoPr.s 			page 49


 1349 0078 FFF7FEFF 		bl	lcd_command
 1350              	.LVL48:
 114:Core/Src/main.c ****         lcd_command(LINE_TWO);
 1351              		.loc 1 114 9 view .LVU369
 1352 007c 1C48     		ldr	r0, .L86+44
 1353 007e FFF7FEFF 		bl	lcd_putstring
 1354              	.LVL49:
 115:Core/Src/main.c ****         lcd_putstring(time);
 1355              		.loc 1 115 9 view .LVU370
 1356 0082 C020     		movs	r0, #192
 1357 0084 FFF7FEFF 		bl	lcd_command
 1358              	.LVL50:
 116:Core/Src/main.c ****         delay(10000);
 1359              		.loc 1 116 9 view .LVU371
 1360 0088 1A48     		ldr	r0, .L86+48
 1361 008a FFF7FEFF 		bl	lcd_putstring
 1362              	.LVL51:
 117:Core/Src/main.c ****     }
 1363              		.loc 1 117 9 view .LVU372
 1364 008e 1A48     		ldr	r0, .L86+52
 1365 0090 FFF7FEFF 		bl	delay
 1366              	.LVL52:
 1367 0094 E6E7     		b	.L78
 1368              	.L85:
 120:Core/Src/main.c ****         TIM14 -> CR1 |= TIM_CR1_CEN; //Start timer
 1369              		.loc 1 120 9 view .LVU373
 120:Core/Src/main.c ****         TIM14 -> CR1 |= TIM_CR1_CEN; //Start timer
 1370              		.loc 1 120 21 is_stmt 0 view .LVU374
 1371 0096 0121     		movs	r1, #1
 1372 0098 0D4B     		ldr	r3, .L86+12
 1373 009a 5961     		str	r1, [r3, #20]
 121:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 1374              		.loc 1 121 9 is_stmt 1 view .LVU375
 121:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 1375              		.loc 1 121 15 is_stmt 0 view .LVU376
 1376 009c 134A     		ldr	r2, .L86+40
 1377 009e 1368     		ldr	r3, [r2]
 121:Core/Src/main.c ****         //convert2BCDASCII(minutes, seconds, hundredths, time);
 1378              		.loc 1 121 22 view .LVU377
 1379 00a0 0B43     		orrs	r3, r1
 1380 00a2 1360     		str	r3, [r2]
 123:Core/Src/main.c ****         lcd_putstring("Time");
 1381              		.loc 1 123 9 is_stmt 1 view .LVU378
 1382 00a4 0120     		movs	r0, #1
 1383 00a6 FFF7FEFF 		bl	lcd_command
 1384              	.LVL53:
 124:Core/Src/main.c ****         lcd_command(LINE_TWO);
 1385              		.loc 1 124 9 view .LVU379
 1386 00aa 1148     		ldr	r0, .L86+44
 1387 00ac FFF7FEFF 		bl	lcd_putstring
 1388              	.LVL54:
 125:Core/Src/main.c ****         lcd_putstring(time);
 1389              		.loc 1 125 9 view .LVU380
 1390 00b0 C020     		movs	r0, #192
 1391 00b2 FFF7FEFF 		bl	lcd_command
 1392              	.LVL55:
 126:Core/Src/main.c ****         delay(10000);
ARM GAS  /tmp/cc1MGoPr.s 			page 50


 1393              		.loc 1 126 9 view .LVU381
 1394 00b6 0F48     		ldr	r0, .L86+48
 1395 00b8 FFF7FEFF 		bl	lcd_putstring
 1396              	.LVL56:
 127:Core/Src/main.c ****     }
 1397              		.loc 1 127 9 view .LVU382
 1398 00bc 0E48     		ldr	r0, .L86+52
 1399 00be FFF7FEFF 		bl	delay
 1400              	.LVL57:
 129:Core/Src/main.c **** void checkPB(void){
 1401              		.loc 1 129 1 is_stmt 0 view .LVU383
 1402 00c2 CFE7     		b	.L78
 1403              	.L87:
 1404              		.align	2
 1405              	.L86:
 1406 00c4 00000000 		.word	resetFlag
 1407 00c8 00000000 		.word	startFlag
 1408 00cc 00000000 		.word	lapFlag
 1409 00d0 00040048 		.word	1207960576
 1410 00d4 00000000 		.word	hundredths
 1411 00d8 00000000 		.word	seconds
 1412 00dc 00000000 		.word	minutes
 1413 00e0 00000000 		.word	.LC11
 1414 00e4 0C000000 		.word	.LC13
 1415 00e8 00000000 		.word	stopFlag
 1416 00ec 00200040 		.word	1073750016
 1417 00f0 1C000000 		.word	.LC18
 1418 00f4 00000000 		.word	time
 1419 00f8 10270000 		.word	10000
 1420              		.cfi_endproc
 1421              	.LFE50:
 1423              		.section	.text.main,"ax",%progbits
 1424              		.align	1
 1425              		.global	main
 1426              		.syntax unified
 1427              		.code	16
 1428              		.thumb_func
 1430              	main:
 1431              	.LFB46:
  42:Core/Src/main.c ****     init_LCD();
 1432              		.loc 1 42 17 is_stmt 1 view -0
 1433              		.cfi_startproc
 1434              		@ Volatile: function does not return.
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 1437 0000 10B5     		push	{r4, lr}
 1438              		.cfi_def_cfa_offset 8
 1439              		.cfi_offset 4, -8
 1440              		.cfi_offset 14, -4
  43:Core/Src/main.c ****     initGPIO();
 1441              		.loc 1 43 5 view .LVU385
 1442 0002 FFF7FEFF 		bl	init_LCD
 1443              	.LVL58:
  44:Core/Src/main.c ****     initTIM14();
 1444              		.loc 1 44 5 view .LVU386
 1445 0006 FFF7FEFF 		bl	initGPIO
 1446              	.LVL59:
ARM GAS  /tmp/cc1MGoPr.s 			page 51


  45:Core/Src/main.c ****     lcd_command(CLEAR);
 1447              		.loc 1 45 5 view .LVU387
 1448 000a FFF7FEFF 		bl	initTIM14
 1449              	.LVL60:
  46:Core/Src/main.c ****     while (1){
 1450              		.loc 1 46 5 view .LVU388
 1451 000e 0120     		movs	r0, #1
 1452 0010 FFF7FEFF 		bl	lcd_command
 1453              	.LVL61:
 1454              	.L89:
  47:Core/Src/main.c ****         display();
 1455              		.loc 1 47 5 discriminator 1 view .LVU389
  48:Core/Src/main.c ****     }
 1456              		.loc 1 48 9 discriminator 1 view .LVU390
 1457 0014 FFF7FEFF 		bl	display
 1458              	.LVL62:
  47:Core/Src/main.c ****         display();
 1459              		.loc 1 47 11 discriminator 1 view .LVU391
 1460 0018 FCE7     		b	.L89
 1461              		.cfi_endproc
 1462              	.LFE46:
 1464              		.global	__aeabi_uidiv
 1465              		.global	__aeabi_uidivmod
 1466              		.section	.text.convert2BCDASCII,"ax",%progbits
 1467              		.align	1
 1468              		.global	convert2BCDASCII
 1469              		.syntax unified
 1470              		.code	16
 1471              		.thumb_func
 1473              	convert2BCDASCII:
 1474              	.LVL63:
 1475              	.LFB52:
 157:Core/Src/main.c **** /*4-bit BCD to ASCII conversion*/
 158:Core/Src/main.c **** void convert2BCDASCII(const uint8_t min, const uint8_t sec, const uint8_t hund, char* resultPtr){
 1476              		.loc 1 158 97 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 8
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
 1480              		.loc 1 158 97 is_stmt 0 view .LVU393
 1481 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1482              		.cfi_def_cfa_offset 20
 1483              		.cfi_offset 4, -20
 1484              		.cfi_offset 5, -16
 1485              		.cfi_offset 6, -12
 1486              		.cfi_offset 7, -8
 1487              		.cfi_offset 14, -4
 1488 0002 83B0     		sub	sp, sp, #12
 1489              		.cfi_def_cfa_offset 32
 1490 0004 0700     		movs	r7, r0
 1491 0006 0E00     		movs	r6, r1
 1492 0008 1500     		movs	r5, r2
 1493 000a 1C00     		movs	r4, r3
 159:Core/Src/main.c ****     //Store digits in order: {min1, min0, sec1, sec0, hun1, hun0}
 160:Core/Src/main.c ****     uint8_t digits[6];
 1494              		.loc 1 160 5 is_stmt 1 view .LVU394
 161:Core/Src/main.c ****     int8_t time_idx = 0;
 1495              		.loc 1 161 5 view .LVU395
ARM GAS  /tmp/cc1MGoPr.s 			page 52


 1496              	.LVL64:
 162:Core/Src/main.c ****     //Get digits
 163:Core/Src/main.c ****     digits[0] = (min/10) % 10;
 1497              		.loc 1 163 5 view .LVU396
 1498              		.loc 1 163 15 is_stmt 0 view .LVU397
 1499 000c 0A21     		movs	r1, #10
 1500              	.LVL65:
 1501              		.loc 1 163 15 view .LVU398
 1502 000e FFF7FEFF 		bl	__aeabi_uidiv
 1503              	.LVL66:
 1504              		.loc 1 163 15 view .LVU399
 1505 0012 C0B2     		uxtb	r0, r0
 1506 0014 0A21     		movs	r1, #10
 1507 0016 FFF7FEFF 		bl	__aeabi_uidivmod
 1508              	.LVL67:
 1509 001a 6B46     		mov	r3, sp
 1510 001c 1970     		strb	r1, [r3]
 164:Core/Src/main.c ****     digits[1] = min % 10;
 1511              		.loc 1 164 5 is_stmt 1 view .LVU400
 1512              		.loc 1 164 15 is_stmt 0 view .LVU401
 1513 001e 0A21     		movs	r1, #10
 1514 0020 3800     		movs	r0, r7
 1515 0022 FFF7FEFF 		bl	__aeabi_uidivmod
 1516              	.LVL68:
 1517 0026 6B46     		mov	r3, sp
 1518 0028 5970     		strb	r1, [r3, #1]
 165:Core/Src/main.c ****     digits[2] = (sec/10) % 10;
 1519              		.loc 1 165 5 is_stmt 1 view .LVU402
 1520              		.loc 1 165 15 is_stmt 0 view .LVU403
 1521 002a 0A21     		movs	r1, #10
 1522 002c 3000     		movs	r0, r6
 1523 002e FFF7FEFF 		bl	__aeabi_uidiv
 1524              	.LVL69:
 1525 0032 C0B2     		uxtb	r0, r0
 1526 0034 0A21     		movs	r1, #10
 1527 0036 FFF7FEFF 		bl	__aeabi_uidivmod
 1528              	.LVL70:
 1529 003a 6B46     		mov	r3, sp
 1530 003c 9970     		strb	r1, [r3, #2]
 166:Core/Src/main.c ****     digits[3] = sec % 10;
 1531              		.loc 1 166 5 is_stmt 1 view .LVU404
 1532              		.loc 1 166 15 is_stmt 0 view .LVU405
 1533 003e 0A21     		movs	r1, #10
 1534 0040 3000     		movs	r0, r6
 1535 0042 FFF7FEFF 		bl	__aeabi_uidivmod
 1536              	.LVL71:
 1537 0046 6B46     		mov	r3, sp
 1538 0048 D970     		strb	r1, [r3, #3]
 167:Core/Src/main.c ****     digits[4] = (hund/10) % 10;
 1539              		.loc 1 167 5 is_stmt 1 view .LVU406
 1540              		.loc 1 167 15 is_stmt 0 view .LVU407
 1541 004a 0A21     		movs	r1, #10
 1542 004c 2800     		movs	r0, r5
 1543 004e FFF7FEFF 		bl	__aeabi_uidiv
 1544              	.LVL72:
 1545 0052 C0B2     		uxtb	r0, r0
 1546 0054 0A21     		movs	r1, #10
ARM GAS  /tmp/cc1MGoPr.s 			page 53


 1547 0056 FFF7FEFF 		bl	__aeabi_uidivmod
 1548              	.LVL73:
 1549 005a 6B46     		mov	r3, sp
 1550 005c 1971     		strb	r1, [r3, #4]
 168:Core/Src/main.c ****     digits[5] = hund % 10;
 1551              		.loc 1 168 5 is_stmt 1 view .LVU408
 1552              		.loc 1 168 15 is_stmt 0 view .LVU409
 1553 005e 0A21     		movs	r1, #10
 1554 0060 2800     		movs	r0, r5
 1555 0062 FFF7FEFF 		bl	__aeabi_uidivmod
 1556              	.LVL74:
 1557 0066 6B46     		mov	r3, sp
 1558 0068 5971     		strb	r1, [r3, #5]
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****     for (int8_t i = 0; i < 6; ++i) {
 1559              		.loc 1 170 5 is_stmt 1 view .LVU410
 1560              	.LBB6:
 1561              		.loc 1 170 10 view .LVU411
 1562              	.LVL75:
 1563              		.loc 1 170 17 is_stmt 0 view .LVU412
 1564 006a 0021     		movs	r1, #0
 1565              	.LBE6:
 161:Core/Src/main.c ****     //Get digits
 1566              		.loc 1 161 12 view .LVU413
 1567 006c 0022     		movs	r2, #0
 1568              	.LBB7:
 1569              		.loc 1 170 5 view .LVU414
 1570 006e 06E0     		b	.L91
 1571              	.LVL76:
 1572              	.L92:
 171:Core/Src/main.c ****         digits[i] += 48; //Convert to ASCII by adding offset from '0' character
 172:Core/Src/main.c ****         if (time_idx == 2 || time_idx == 5) {
 173:Core/Src/main.c ****             ++time_idx; //Skip ‘:’ and ‘.’ in output string
 1573              		.loc 1 173 13 is_stmt 1 view .LVU415
 1574 0070 0132     		adds	r2, r2, #1
 1575              	.LVL77:
 1576              		.loc 1 173 13 is_stmt 0 view .LVU416
 1577 0072 52B2     		sxtb	r2, r2
 1578              	.LVL78:
 1579              	.L93:
 174:Core/Src/main.c ****         }
 175:Core/Src/main.c ****         resultPtr[time_idx] = digits[i];
 1580              		.loc 1 175 9 is_stmt 1 discriminator 2 view .LVU417
 1581              		.loc 1 175 29 is_stmt 0 discriminator 2 view .LVU418
 1582 0074 A054     		strb	r0, [r4, r2]
 176:Core/Src/main.c ****         ++time_idx;
 1583              		.loc 1 176 9 is_stmt 1 discriminator 2 view .LVU419
 1584 0076 0132     		adds	r2, r2, #1
 1585              	.LVL79:
 1586              		.loc 1 176 9 is_stmt 0 discriminator 2 view .LVU420
 1587 0078 52B2     		sxtb	r2, r2
 1588              	.LVL80:
 170:Core/Src/main.c ****         digits[i] += 48; //Convert to ASCII by adding offset from '0' character
 1589              		.loc 1 170 31 is_stmt 1 discriminator 2 view .LVU421
 1590 007a 0131     		adds	r1, r1, #1
 1591              	.LVL81:
 170:Core/Src/main.c ****         digits[i] += 48; //Convert to ASCII by adding offset from '0' character
ARM GAS  /tmp/cc1MGoPr.s 			page 54


 1592              		.loc 1 170 31 is_stmt 0 discriminator 2 view .LVU422
 1593 007c 49B2     		sxtb	r1, r1
 1594              	.LVL82:
 1595              	.L91:
 170:Core/Src/main.c ****         digits[i] += 48; //Convert to ASCII by adding offset from '0' character
 1596              		.loc 1 170 26 is_stmt 1 discriminator 1 view .LVU423
 1597 007e 0529     		cmp	r1, #5
 1598 0080 09DC     		bgt	.L95
 171:Core/Src/main.c ****         if (time_idx == 2 || time_idx == 5) {
 1599              		.loc 1 171 9 view .LVU424
 171:Core/Src/main.c ****         if (time_idx == 2 || time_idx == 5) {
 1600              		.loc 1 171 15 is_stmt 0 view .LVU425
 1601 0082 6B46     		mov	r3, sp
 1602 0084 585C     		ldrb	r0, [r3, r1]
 171:Core/Src/main.c ****         if (time_idx == 2 || time_idx == 5) {
 1603              		.loc 1 171 19 view .LVU426
 1604 0086 3030     		adds	r0, r0, #48
 1605 0088 C0B2     		uxtb	r0, r0
 1606 008a 5854     		strb	r0, [r3, r1]
 172:Core/Src/main.c ****             ++time_idx; //Skip ‘:’ and ‘.’ in output string
 1607              		.loc 1 172 9 is_stmt 1 view .LVU427
 172:Core/Src/main.c ****             ++time_idx; //Skip ‘:’ and ‘.’ in output string
 1608              		.loc 1 172 12 is_stmt 0 view .LVU428
 1609 008c 022A     		cmp	r2, #2
 1610 008e EFD0     		beq	.L92
 172:Core/Src/main.c ****             ++time_idx; //Skip ‘:’ and ‘.’ in output string
 1611              		.loc 1 172 27 discriminator 1 view .LVU429
 1612 0090 052A     		cmp	r2, #5
 1613 0092 EFD1     		bne	.L93
 1614 0094 ECE7     		b	.L92
 1615              	.L95:
 1616              	.LBE7:
 177:Core/Src/main.c ****     }
 178:Core/Src/main.c **** }
 1617              		.loc 1 178 1 view .LVU430
 1618 0096 03B0     		add	sp, sp, #12
 1619              		@ sp needed
 1620              	.LVL83:
 1621              		.loc 1 178 1 view .LVU431
 1622 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 1623              		.cfi_endproc
 1624              	.LFE52:
 1626              		.global	resetFlag
 1627              		.section	.data.resetFlag,"aw"
 1630              	resetFlag:
 1631 0000 01       		.byte	1
 1632              		.global	stopFlag
 1633              		.section	.bss.stopFlag,"aw",%nobits
 1636              	stopFlag:
 1637 0000 00       		.space	1
 1638              		.global	lapFlag
 1639              		.section	.bss.lapFlag,"aw",%nobits
 1642              	lapFlag:
 1643 0000 00       		.space	1
 1644              		.global	startFlag
 1645              		.section	.bss.startFlag,"aw",%nobits
 1648              	startFlag:
ARM GAS  /tmp/cc1MGoPr.s 			page 55


 1649 0000 00       		.space	1
 1650              		.global	hundredths
 1651              		.section	.bss.hundredths,"aw",%nobits
 1654              	hundredths:
 1655 0000 00       		.space	1
 1656              		.global	seconds
 1657              		.section	.bss.seconds,"aw",%nobits
 1660              	seconds:
 1661 0000 00       		.space	1
 1662              		.global	minutes
 1663              		.section	.bss.minutes,"aw",%nobits
 1666              	minutes:
 1667 0000 00       		.space	1
 1668              		.global	time
 1669              		.section	.data.time,"aw"
 1670              		.align	2
 1673              	time:
 1674 0000 3E202020 		.ascii	">     -    -  - -\000"
 1674      20202D20 
 1674      2020202D 
 1674      20202D20 
 1674      2D00
 1675              		.text
 1676              	.Letext0:
 1677              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 1678              		.file 5 "/home/peter/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-non
 1679              		.file 6 "/home/peter/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-non
ARM GAS  /tmp/cc1MGoPr.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc1MGoPr.s:19     .text.delay:0000000000000000 $t
     /tmp/cc1MGoPr.s:25     .text.delay:0000000000000000 delay
     /tmp/cc1MGoPr.s:78     .text.pulse_strobe:0000000000000000 $t
     /tmp/cc1MGoPr.s:84     .text.pulse_strobe:0000000000000000 pulse_strobe
     /tmp/cc1MGoPr.s:137    .text.pulse_strobe:0000000000000034 $d
     /tmp/cc1MGoPr.s:142    .text.lcd_putchar:0000000000000000 $t
     /tmp/cc1MGoPr.s:148    .text.lcd_putchar:0000000000000000 lcd_putchar
     /tmp/cc1MGoPr.s:394    .text.lcd_putchar:000000000000011c $d
     /tmp/cc1MGoPr.s:400    .text.lcd_putstring:0000000000000000 $t
     /tmp/cc1MGoPr.s:406    .text.lcd_putstring:0000000000000000 lcd_putstring
     /tmp/cc1MGoPr.s:457    .text.lcd_command:0000000000000000 $t
     /tmp/cc1MGoPr.s:463    .text.lcd_command:0000000000000000 lcd_command
     /tmp/cc1MGoPr.s:713    .text.lcd_command:0000000000000124 $d
     /tmp/cc1MGoPr.s:720    .text.init_LCD:0000000000000000 $t
     /tmp/cc1MGoPr.s:726    .text.init_LCD:0000000000000000 init_LCD
     /tmp/cc1MGoPr.s:819    .text.init_LCD:0000000000000070 $d
     /tmp/cc1MGoPr.s:827    .text.initGPIO:0000000000000000 $t
     /tmp/cc1MGoPr.s:833    .text.initGPIO:0000000000000000 initGPIO
     /tmp/cc1MGoPr.s:891    .text.initGPIO:000000000000003c $d
     /tmp/cc1MGoPr.s:898    .text.initTIM14:0000000000000000 $t
     /tmp/cc1MGoPr.s:904    .text.initTIM14:0000000000000000 initTIM14
     /tmp/cc1MGoPr.s:965    .text.initTIM14:000000000000002c $d
     /tmp/cc1MGoPr.s:973    .text.TIM14_IRQHandler:0000000000000000 $t
     /tmp/cc1MGoPr.s:979    .text.TIM14_IRQHandler:0000000000000000 TIM14_IRQHandler
     /tmp/cc1MGoPr.s:1066   .text.TIM14_IRQHandler:000000000000005c $d
     /tmp/cc1MGoPr.s:1654   .bss.hundredths:0000000000000000 hundredths
     /tmp/cc1MGoPr.s:1660   .bss.seconds:0000000000000000 seconds
     /tmp/cc1MGoPr.s:1666   .bss.minutes:0000000000000000 minutes
     /tmp/cc1MGoPr.s:1074   .text.checkPB:0000000000000000 $t
     /tmp/cc1MGoPr.s:1080   .text.checkPB:0000000000000000 checkPB
     /tmp/cc1MGoPr.s:1215   .text.checkPB:0000000000000074 $d
     /tmp/cc1MGoPr.s:1648   .bss.startFlag:0000000000000000 startFlag
     /tmp/cc1MGoPr.s:1636   .bss.stopFlag:0000000000000000 stopFlag
     /tmp/cc1MGoPr.s:1642   .bss.lapFlag:0000000000000000 lapFlag
     /tmp/cc1MGoPr.s:1630   .data.resetFlag:0000000000000000 resetFlag
     /tmp/cc1MGoPr.s:1223   .rodata.display.str1.4:0000000000000000 $d
     /tmp/cc1MGoPr.s:1233   .text.display:0000000000000000 $t
     /tmp/cc1MGoPr.s:1239   .text.display:0000000000000000 display
     /tmp/cc1MGoPr.s:1406   .text.display:00000000000000c4 $d
     /tmp/cc1MGoPr.s:1673   .data.time:0000000000000000 time
     /tmp/cc1MGoPr.s:1424   .text.main:0000000000000000 $t
     /tmp/cc1MGoPr.s:1430   .text.main:0000000000000000 main
     /tmp/cc1MGoPr.s:1467   .text.convert2BCDASCII:0000000000000000 $t
     /tmp/cc1MGoPr.s:1473   .text.convert2BCDASCII:0000000000000000 convert2BCDASCII
     /tmp/cc1MGoPr.s:1637   .bss.stopFlag:0000000000000000 $d
     /tmp/cc1MGoPr.s:1643   .bss.lapFlag:0000000000000000 $d
     /tmp/cc1MGoPr.s:1649   .bss.startFlag:0000000000000000 $d
     /tmp/cc1MGoPr.s:1655   .bss.hundredths:0000000000000000 $d
     /tmp/cc1MGoPr.s:1661   .bss.seconds:0000000000000000 $d
     /tmp/cc1MGoPr.s:1667   .bss.minutes:0000000000000000 $d
     /tmp/cc1MGoPr.s:1670   .data.time:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
__aeabi_uidivmod
ARM GAS  /tmp/cc1MGoPr.s 			page 57


